{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7","program":"/home/nic/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","zstd","--edition=2018","/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"legacy\"","-C","metadata=2658d71e7eb71b12","-C","extra-filename=-2658d71e7eb71b12","--out-dir","/home/nic/Documents/solana/solana-blockchain-developer-bootcamp/day1/gm-program/target/rls/debug/deps","-L","dependency=/home/nic/Documents/solana/solana-blockchain-developer-bootcamp/day1/gm-program/target/rls/debug/deps","--extern","zstd_safe=/home/nic/Documents/solana/solana-blockchain-developer-bootcamp/day1/gm-program/target/rls/debug/deps/libzstd_safe-eda6a264927ab7f1.rmeta","--cap-lints","allow","-L","native=/home/nic/Documents/solana/solana-blockchain-developer-bootcamp/day1/gm-program/target/rls/debug/build/zstd-sys-c453c82fc75929fd/out","--error-format=json","--sysroot","/home/nic/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/nic/Documents/solana/solana-blockchain-developer-bootcamp/day1/gm-program/target/rls/debug/deps/libzstd-2658d71e7eb71b12.rmeta"},"prelude":{"crate_id":{"name":"zstd","disambiguator":[11948389661804330377,0]},"crate_root":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src","external_crates":[{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[266559774140218402,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[308958561119313021,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16887813381474488870,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18138047136180876386,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[16720472299414307338,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5531791840279234689,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2995214285932701362,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17222063258158154566,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[7245893233601562531,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[4839492760463372304,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[1226649225884195013,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[12460504831400488231,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[2536915343129323536,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[4342342869490546433,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2139538778087984071,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","num":20,"id":{"name":"zstd_safe","disambiguator":[17542396905263452164,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","num":21,"id":{"name":"libc","disambiguator":[11407690004646896535,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","num":22,"id":{"name":"zstd_sys","disambiguator":[9070412813688219504,0]}}],"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":0,"byte_end":1605,"line_start":1,"line_end":65,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":490},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":1867,"byte_end":1877,"line_start":10,"line_end":10,"column_start":27,"column_end":37},"alias_span":null,"name":"Compressor","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":495},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":1907,"byte_end":1919,"line_start":11,"line_end":11,"column_start":29,"column_end":41},"alias_span":null,"name":"Decompressor","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":20,"index":111},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9586,"byte_end":9591,"line_start":23,"line_end":23,"column_start":21,"column_end":26},"alias_span":null,"name":"CDict","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":20,"index":125},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9593,"byte_end":9598,"line_start":23,"line_end":23,"column_start":28,"column_end":33},"alias_span":null,"name":"DDict","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":0,"index":305},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/mod.rs","byte_start":33504,"byte_end":33510,"line_start":6,"line_end":6,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":283}},{"kind":"Use","ref_id":{"krate":0,"index":346},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/mod.rs","byte_start":33534,"byte_end":33540,"line_start":7,"line_end":7,"column_start":23,"column_end":29},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":283}},{"kind":"Use","ref_id":{"krate":20,"index":309},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48178,"byte_end":48188,"line_start":9,"line_end":9,"column_start":21,"column_end":31},"alias_span":null,"name":"CParameter","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":20,"index":247},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48190,"byte_end":48200,"line_start":9,"line_end":9,"column_start":33,"column_end":43},"alias_span":null,"name":"DParameter","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":20,"index":279},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48202,"byte_end":48210,"line_start":9,"line_end":9,"column_start":45,"column_end":53},"alias_span":null,"name":"InBuffer","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":20,"index":286},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48212,"byte_end":48221,"line_start":9,"line_end":9,"column_start":55,"column_end":64},"alias_span":null,"name":"OutBuffer","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":275},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14440,"byte_end":14451,"line_start":20,"line_end":20,"column_start":27,"column_end":38},"alias_span":null,"name":"copy_decode","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":280},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14453,"byte_end":14464,"line_start":20,"line_end":20,"column_start":40,"column_end":51},"alias_span":null,"name":"copy_encode","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":273},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14466,"byte_end":14476,"line_start":20,"line_end":20,"column_start":53,"column_end":63},"alias_span":null,"name":"decode_all","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":278},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14478,"byte_end":14488,"line_start":20,"line_end":20,"column_start":65,"column_end":75},"alias_span":null,"name":"encode_all","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":131},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14511,"byte_end":14518,"line_start":21,"line_end":21,"column_start":21,"column_end":28},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":207},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14542,"byte_end":14559,"line_start":22,"line_end":22,"column_start":23,"column_end":40},"alias_span":null,"name":"AutoFinishEncoder","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":201},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14561,"byte_end":14568,"line_start":22,"line_end":22,"column_start":42,"column_end":49},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":20,"index":41},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":770,"byte_end":784,"line_start":34,"line_end":34,"column_start":20,"column_end":34},"alias_span":null,"name":"DEFAULT_COMPRESSION_LEVEL","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":273},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":858,"byte_end":868,"line_start":37,"line_end":37,"column_start":25,"column_end":35},"alias_span":null,"name":"decode_all","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":278},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":870,"byte_end":880,"line_start":37,"line_end":37,"column_start":37,"column_end":47},"alias_span":null,"name":"encode_all","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":131},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":882,"byte_end":889,"line_start":37,"line_end":37,"column_start":49,"column_end":56},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":201},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":891,"byte_end":898,"line_start":37,"line_end":37,"column_start":58,"column_end":65},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":0,"byte_end":1605,"line_start":1,"line_end":65,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":53},{"krate":0,"index":99},{"krate":0,"index":470},{"krate":0,"index":473},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":480},{"krate":0,"index":483},{"krate":0,"index":486},{"krate":0,"index":489}],"decl_id":null,"docs":" Rust binding to the [zstd library][zstd].","sig":null,"attributes":[{"value":"/ Rust binding to the [zstd library][zstd].","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":0,"byte_end":45,"line_start":1,"line_end":1,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":46,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides:","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":50,"byte_end":74,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":75,"byte_end":78,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * An [encoder](stream/write/struct.Encoder.html) to compress data using zstd","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":79,"byte_end":159,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/   and send the output to another write.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":160,"byte_end":203,"line_start":6,"line_end":6,"column_start":1,"column_end":44}},{"value":"/ * A [decoder](stream/read/struct.Decoder.html) to read input data from a `Read`","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":204,"byte_end":287,"line_start":7,"line_end":7,"column_start":1,"column_end":84}},{"value":"/   and decompress it.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":288,"byte_end":312,"line_start":8,"line_end":8,"column_start":1,"column_end":25}},{"value":"/ * Convenient functions for common tasks.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":313,"byte_end":357,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":358,"byte_end":361,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":362,"byte_end":375,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":376,"byte_end":379,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":380,"byte_end":393,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/ extern crate zstd;","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":394,"byte_end":416,"line_start":14,"line_end":14,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":417,"byte_end":420,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ use std::io;","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":421,"byte_end":437,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":438,"byte_end":441,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":442,"byte_end":457,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/ \t// Uncompress input and print the result.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":458,"byte_end":504,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"/ \tzstd::stream::copy_decode(io::stdin(), io::stdout()).unwrap();","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":505,"byte_end":572,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/ }","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":573,"byte_end":578,"line_start":21,"line_end":21,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":579,"byte_end":586,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":587,"byte_end":590,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [zstd]: https://github.com/facebook/zstd","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":591,"byte_end":635,"line_start":24,"line_end":24,"column_start":1,"column_end":45}},{"value":"deny(missing_docs)","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":636,"byte_end":658,"line_start":25,"line_end":25,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"block","qualname":"::block","value":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":22},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52}],"decl_id":null,"docs":" Compress and decompress individual blocks.","sig":null,"attributes":[{"value":"/ Compress and decompress individual blocks.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":1607,"byte_end":1653,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":1654,"byte_end":1657,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ These methods process all the input data at once.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":1658,"byte_end":1711,"line_start":3,"line_end":3,"column_start":1,"column_end":54}},{"value":"/ It is therefore best used with relatively small blocks","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":1712,"byte_end":1770,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/ (like small network packets).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":1771,"byte_end":1804,"line_start":5,"line_end":5,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":490},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":4873,"byte_end":4883,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"Compressor","qualname":"::block::compressor::Compressor","value":"Compressor {  }","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492}],"decl_id":null,"docs":" Allows to compress independently multiple blocks of data.","sig":null,"attributes":[{"value":"/ Allows to compress independently multiple blocks of data.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":4640,"byte_end":4701,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":4702,"byte_end":4705,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This reduces memory usage compared to calling `compress` multiple times.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":4706,"byte_end":4782,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ The compressed blocks are still completely independent.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":4783,"byte_end":4842,"line_start":9,"line_end":9,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":5014,"byte_end":5017,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<Compressor>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd compressor\n","sig":null,"attributes":[{"value":"/ Creates a new zstd compressor","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":4969,"byte_end":5002,"line_start":17,"line_end":17,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":5157,"byte_end":5166,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"with_dict","qualname":"<Compressor>::with_dict","value":"pub fn with_dict(Vec<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd compressor, using the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd compressor, using the given dictionary.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":5083,"byte_end":5145,"line_start":22,"line_end":22,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":5598,"byte_end":5616,"line_start":36,"line_end":36,"column_start":12,"column_end":30},"name":"compress_to_buffer","qualname":"<Compressor>::compress_to_buffer","value":"pub fn compress_to_buffer(&mut Self, &[u8], &mut [u8], i32)\n-> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Compress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Compress a single block of data to the given destination buffer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":5299,"byte_end":5367,"line_start":30,"line_end":30,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":5372,"byte_end":5375,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":5380,"byte_end":5454,"line_start":32,"line_end":32,"column_start":5,"column_end":79}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":5459,"byte_end":5518,"line_start":33,"line_end":33,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":5523,"byte_end":5526,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":5531,"byte_end":5586,"line_start":35,"line_end":35,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":6103,"byte_end":6111,"line_start":55,"line_end":55,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compressor>::compress","value":"pub fn compress(&mut Self, &[u8], i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a block of data and returns the compressed result.","sig":null,"attributes":[{"value":"/ Compresses a block of data and returns the compressed result.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":5958,"byte_end":6023,"line_start":52,"line_end":52,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":6028,"byte_end":6031,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":6036,"byte_end":6091,"line_start":54,"line_end":54,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":495},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":7116,"byte_end":7128,"line_start":10,"line_end":10,"column_start":12,"column_end":24},"name":"Decompressor","qualname":"::block::decompressor::Decompressor","value":"Decompressor {  }","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":497}],"decl_id":null,"docs":" Allows to decompress independently multiple blocks of data.","sig":null,"attributes":[{"value":"/ Allows to decompress independently multiple blocks of data.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":6939,"byte_end":7002,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":7003,"byte_end":7006,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This reduces memory usage compared to calling `decompress` multiple times.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":7007,"byte_end":7085,"line_start":8,"line_end":8,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":7264,"byte_end":7267,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompressor>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd decompressor.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd decompressor.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":7216,"byte_end":7252,"line_start":16,"line_end":16,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":7411,"byte_end":7420,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"with_dict","qualname":"<Decompressor>::with_dict","value":"pub fn with_dict(Vec<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd decompressor, using the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd decompressor, using the given dictionary.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":7335,"byte_end":7399,"line_start":21,"line_end":21,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":7787,"byte_end":7807,"line_start":33,"line_end":33,"column_start":12,"column_end":32},"name":"decompress_to_buffer","qualname":"<Decompressor>::decompress_to_buffer","value":"pub fn decompress_to_buffer(&mut Self, &[u8], &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Deompress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Deompress a single block of data to the given destination buffer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":7555,"byte_end":7624,"line_start":29,"line_end":29,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":7629,"byte_end":7632,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":7637,"byte_end":7711,"line_start":31,"line_end":31,"column_start":5,"column_end":79}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":7716,"byte_end":7775,"line_start":32,"line_end":32,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":8303,"byte_end":8313,"line_start":51,"line_end":51,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompressor>::decompress","value":"pub fn decompress(&mut Self, &[u8], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompress a block of data, and return the result in a `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Decompress a block of data, and return the result in a `Vec<u8>`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":8108,"byte_end":8177,"line_start":47,"line_end":47,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":8182,"byte_end":8185,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ The decompressed data should be less than `capacity` bytes,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":8190,"byte_end":8253,"line_start":49,"line_end":49,"column_start":5,"column_end":68}},{"value":"/ or an error will be returned.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":8258,"byte_end":8291,"line_start":50,"line_end":50,"column_start":5,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":49},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2213,"byte_end":2231,"line_start":21,"line_end":21,"column_start":8,"column_end":26},"name":"compress_to_buffer","qualname":"::block::compress_to_buffer","value":"pub fn compress_to_buffer(&[u8], &mut [u8], i32) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Compresses a single block of data to the given destination buffer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":1936,"byte_end":2006,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2007,"byte_end":2010,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2011,"byte_end":2085,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2086,"byte_end":2145,"line_start":18,"line_end":18,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2146,"byte_end":2149,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2150,"byte_end":2205,"line_start":20,"line_end":20,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":50},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2526,"byte_end":2534,"line_start":32,"line_end":32,"column_start":8,"column_end":16},"name":"compress","qualname":"::block::compress","value":"pub fn compress(&[u8], i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a block of data and returns the compressed result.","sig":null,"attributes":[{"value":"/ Compresses a block of data and returns the compressed result.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2393,"byte_end":2458,"line_start":29,"line_end":29,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2459,"byte_end":2462,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2463,"byte_end":2518,"line_start":31,"line_end":31,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":51},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2848,"byte_end":2868,"line_start":40,"line_end":40,"column_start":8,"column_end":28},"name":"decompress_to_buffer","qualname":"::block::decompress_to_buffer","value":"pub fn decompress_to_buffer(&[u8], &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Deompress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Deompress a single block of data to the given destination buffer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2632,"byte_end":2701,"line_start":36,"line_end":36,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2702,"byte_end":2705,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2706,"byte_end":2780,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":2781,"byte_end":2840,"line_start":39,"line_end":39,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":3190,"byte_end":3200,"line_start":51,"line_end":51,"column_start":8,"column_end":18},"name":"decompress","qualname":"::block::decompress","value":"pub fn decompress(&[u8], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses a block of data and returns the decompressed result.","sig":null,"attributes":[{"value":"/ Decompresses a block of data and returns the decompressed result.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":3011,"byte_end":3080,"line_start":47,"line_end":47,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":3081,"byte_end":3084,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The decompressed data should be less than `capacity` bytes,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":3085,"byte_end":3148,"line_start":49,"line_end":49,"column_start":1,"column_end":64}},{"value":"/ or an error will be returned.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/mod.rs","byte_start":3149,"byte_end":3182,"line_start":50,"line_end":50,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":53},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dict","qualname":"::dict","value":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":96}],"decl_id":null,"docs":" Train a dictionary from various sources.","sig":null,"attributes":[{"value":"/ Train a dictionary from various sources.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":8768,"byte_end":8812,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":8813,"byte_end":8816,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A dictionary can help improve the compression of small files.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":8817,"byte_end":8882,"line_start":3,"line_end":3,"column_start":1,"column_end":66}},{"value":"/ The dictionary must be present during decompression,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":8883,"byte_end":8939,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/ but can be shared accross multiple \"similar\" files.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":8940,"byte_end":8995,"line_start":5,"line_end":5,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":8996,"byte_end":8999,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Creating a dictionary using the `zstd` C library,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9000,"byte_end":9053,"line_start":7,"line_end":7,"column_start":1,"column_end":54}},{"value":"/ using the `zstd` command-line interface, using this library,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9054,"byte_end":9118,"line_start":8,"line_end":8,"column_start":1,"column_end":65}},{"value":"/ or using the `train` binary provided, should give the same result,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9119,"byte_end":9189,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/ and are therefore completely compatible.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9190,"byte_end":9234,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9235,"byte_end":9238,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ To use, see [`Encoder::with_dictionary`] or [`Decoder::with_dictionary`].","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9239,"byte_end":9316,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9317,"byte_end":9320,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`Encoder::with_dictionary`]: ../struct.Encoder.html#method.with_dictionary","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9321,"byte_end":9400,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ [`Decoder::with_dictionary`]: ../struct.Decoder.html#method.with_dictionary","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9401,"byte_end":9480,"line_start":15,"line_end":15,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":77},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9653,"byte_end":9670,"line_start":26,"line_end":26,"column_start":12,"column_end":29},"name":"EncoderDictionary","qualname":"::dict::EncoderDictionary","value":"EncoderDictionary {  }","parent":null,"children":[{"krate":0,"index":79}],"decl_id":null,"docs":" Prepared dictionary for compression\n","sig":null,"attributes":[{"value":"/ Prepared dictionary for compression","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9602,"byte_end":9641,"line_start":25,"line_end":25,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9865,"byte_end":9868,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<EncoderDictionary>::new","value":"pub fn new(&'a [u8], i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create prepared dictionary for compression","sig":null,"attributes":[{"value":"/ Create prepared dictionary for compression","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9739,"byte_end":9785,"line_start":31,"line_end":31,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9790,"byte_end":9793,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9798,"byte_end":9853,"line_start":33,"line_end":33,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10082,"byte_end":10090,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"as_cdict","qualname":"<EncoderDictionary>::as_cdict","value":"pub fn as_cdict(&Self) -> &CDict","parent":null,"children":[],"decl_id":null,"docs":" Returns reference to `CDict` inner object\n","sig":null,"attributes":[{"value":"/ Returns reference to `CDict` inner object","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10025,"byte_end":10070,"line_start":40,"line_end":40,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":84},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10196,"byte_end":10213,"line_start":47,"line_end":47,"column_start":12,"column_end":29},"name":"DecoderDictionary","qualname":"::dict::DecoderDictionary","value":"DecoderDictionary {  }","parent":null,"children":[{"krate":0,"index":86}],"decl_id":null,"docs":" Prepared dictionary for decompression\n","sig":null,"attributes":[{"value":"/ Prepared dictionary for decompression","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10143,"byte_end":10184,"line_start":46,"line_end":46,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10342,"byte_end":10345,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<DecoderDictionary>::new","value":"pub fn new(&'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create prepared dictionary for decompression\n","sig":null,"attributes":[{"value":"/ Create prepared dictionary for decompression","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10282,"byte_end":10330,"line_start":52,"line_end":52,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10528,"byte_end":10536,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"as_ddict","qualname":"<DecoderDictionary>::as_ddict","value":"pub fn as_ddict(&Self) -> &DDict","parent":null,"children":[],"decl_id":null,"docs":" Returns reference to `DDict` inner object\n","sig":null,"attributes":[{"value":"/ Returns reference to `DDict` inner object","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10471,"byte_end":10516,"line_start":59,"line_end":59,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":91},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10762,"byte_end":10777,"line_start":69,"line_end":69,"column_start":8,"column_end":23},"name":"from_continuous","qualname":"::dict::from_continuous","value":"pub fn from_continuous(&[u8], &[usize], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Train a dictionary from a big continuous chunk of data.","sig":null,"attributes":[{"value":"/ Train a dictionary from a big continuous chunk of data.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10589,"byte_end":10648,"line_start":65,"line_end":65,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10649,"byte_end":10652,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ This is the most efficient way to train a dictionary,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10653,"byte_end":10710,"line_start":67,"line_end":67,"column_start":1,"column_end":58}},{"value":"/ since this is directly fed into `zstd`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10711,"byte_end":10754,"line_start":68,"line_end":68,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":92},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":11820,"byte_end":11832,"line_start":105,"line_end":105,"column_start":8,"column_end":20},"name":"from_samples","qualname":"::dict::from_samples","value":"pub fn from_samples<S: AsRef<[u8]>>(&[S], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Train a dictionary from multiple samples.","sig":null,"attributes":[{"value":"/ Train a dictionary from multiple samples.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":11477,"byte_end":11522,"line_start":96,"line_end":96,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":11523,"byte_end":11526,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ The samples will internaly be copied to a single continuous buffer,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":11527,"byte_end":11598,"line_start":98,"line_end":98,"column_start":1,"column_end":72}},{"value":"/ so make sure you have enough memory available.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":11599,"byte_end":11649,"line_start":99,"line_end":99,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":11650,"byte_end":11653,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ If you need to stretch your system's limits,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":11654,"byte_end":11702,"line_start":101,"line_end":101,"column_start":1,"column_end":49}},{"value":"/ [`from_continuous`] directly uses the given slice.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":11703,"byte_end":11757,"line_start":102,"line_end":102,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":11758,"byte_end":11761,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ [`from_continuous`]: ./fn.from_continuous.html","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":11762,"byte_end":11812,"line_start":104,"line_end":104,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":96},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":12229,"byte_end":12239,"line_start":118,"line_end":118,"column_start":8,"column_end":18},"name":"from_files","qualname":"::dict::from_files","value":"pub fn from_files<I, P>(I, usize) -> io::Result<Vec<u8>> where\nP: AsRef<path::Path>, I: IntoIterator<Item = P>","parent":null,"children":[],"decl_id":null,"docs":" Train a dict from a list of files.\n","sig":null,"attributes":[{"value":"/ Train a dict from a list of files.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":12183,"byte_end":12221,"line_start":117,"line_end":117,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":99},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":176},{"krate":0,"index":262},{"krate":0,"index":283},{"krate":0,"index":383},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":467}],"decl_id":null,"docs":" Compress and decompress Zstd streams.","sig":null,"attributes":[{"value":"/ Compress and decompress Zstd streams.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14041,"byte_end":14082,"line_start":1,"line_end":1,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14083,"byte_end":14086,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Zstd streams are the main way to compress and decompress data.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14087,"byte_end":14153,"line_start":3,"line_end":3,"column_start":1,"column_end":67}},{"value":"/ They are compatible with the `zstd` command-line tool.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14154,"byte_end":14212,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14213,"byte_end":14216,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module provides both `Read` and `Write` interfaces to compressing and","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14217,"byte_end":14295,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ decompressing.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14296,"byte_end":14314,"line_start":7,"line_end":7,"column_start":1,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":100},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::stream::read","value":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":167},{"krate":0,"index":170}],"decl_id":null,"docs":" Implement pull-based [`Read`] trait for both compressing and decompressing.\n","sig":null,"attributes":[{"value":"/ Implement pull-based [`Read`] trait for both compressing and decompressing.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":14572,"byte_end":14651,"line_start":1,"line_end":1,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":131},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15113,"byte_end":15120,"line_start":22,"line_end":22,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::read::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":133}],"decl_id":null,"docs":" A decoder that decompress input data from another `Read`.","sig":null,"attributes":[{"value":"/ A decoder that decompress input data from another `Read`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":14938,"byte_end":14999,"line_start":18,"line_end":18,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15000,"byte_end":15003,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This allows to read a stream of compressed data","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15004,"byte_end":15055,"line_start":20,"line_end":20,"column_start":1,"column_end":52}},{"value":"/ (good for files or heavy network stream).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15056,"byte_end":15101,"line_start":21,"line_end":21,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":134},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15252,"byte_end":15259,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::read::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":136}],"decl_id":null,"docs":" An encoder that compress input data from another `Read`.\n","sig":null,"attributes":[{"value":"/ An encoder that compress input data from another `Read`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15180,"byte_end":15240,"line_start":26,"line_end":26,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15399,"byte_end":15402,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder<BufReader<R>>>::new","value":"pub fn new(R) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15361,"byte_end":15387,"line_start":32,"line_end":32,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15666,"byte_end":15677,"line_start":42,"line_end":42,"column_start":12,"column_end":23},"name":"with_buffer","qualname":"<Decoder<R>>::with_buffer","value":"pub fn with_buffer(R) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder around a `BufRead`.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder around a `BufRead`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15609,"byte_end":15654,"line_start":41,"line_end":41,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15911,"byte_end":15923,"line_start":49,"line_end":49,"column_start":12,"column_end":24},"name":"single_frame","qualname":"<Decoder<R>>::single_frame","value":"pub fn single_frame(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets this `Decoder` to stop after the first frame.","sig":null,"attributes":[{"value":"/ Sets this `Decoder` to stop after the first frame.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15765,"byte_end":15819,"line_start":46,"line_end":46,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15824,"byte_end":15827,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ By default, it keeps concatenating frames until EOF is reached.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15832,"byte_end":15899,"line_start":48,"line_end":48,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":16160,"byte_end":16175,"line_start":57,"line_end":57,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder<R>>::with_dictionary","value":"pub fn with_dictionary(R, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing dictionary.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":16008,"byte_end":16064,"line_start":54,"line_end":54,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":16069,"byte_end":16072,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":16077,"byte_end":16148,"line_start":56,"line_end":56,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":16554,"byte_end":16578,"line_start":67,"line_end":67,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder<R>>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary(R, &DecoderDictionary) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing `DecoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing `DecoderDictionary`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":16393,"byte_end":16458,"line_start":64,"line_end":64,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":16463,"byte_end":16466,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":16471,"byte_end":16542,"line_start":66,"line_end":66,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":16910,"byte_end":16933,"line_start":78,"line_end":78,"column_start":12,"column_end":35},"name":"recommended_output_size","qualname":"<Decoder<R>>::recommended_output_size","value":"pub fn recommended_output_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Recommendation for the size of the output buffer.\n","sig":null,"attributes":[{"value":"/ Recommendation for the size of the output buffer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":16845,"byte_end":16898,"line_start":77,"line_end":77,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17057,"byte_end":17064,"line_start":83,"line_end":83,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Decoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquire a reference to the underlying reader.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":16996,"byte_end":17045,"line_start":82,"line_end":82,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17320,"byte_end":17327,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Decoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquire a mutable reference to the underlying reader.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17120,"byte_end":17177,"line_start":87,"line_end":87,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17182,"byte_end":17185,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17190,"byte_end":17262,"line_start":89,"line_end":89,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17267,"byte_end":17308,"line_start":90,"line_end":90,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17569,"byte_end":17575,"line_start":99,"line_end":99,"column_start":12,"column_end":18},"name":"finish","qualname":"<Decoder<R>>::finish","value":"pub fn finish(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Return the inner `Read`.","sig":null,"attributes":[{"value":"/ Return the inner `Read`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17395,"byte_end":17423,"line_start":95,"line_end":95,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17428,"byte_end":17431,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Calling `finish()` is not *required* after reading a stream -","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17436,"byte_end":17501,"line_start":97,"line_end":97,"column_start":5,"column_end":70}},{"value":"/ just use it if you need to get the `Read` back.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17506,"byte_end":17557,"line_start":98,"line_end":98,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":18033,"byte_end":18036,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder<BufReader<R>>>::new","value":"pub fn new(R, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17995,"byte_end":18021,"line_start":118,"line_end":118,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":18319,"byte_end":18330,"line_start":128,"line_end":128,"column_start":12,"column_end":23},"name":"with_buffer","qualname":"<Encoder<R>>::with_buffer","value":"pub fn with_buffer(R, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder around a `BufRead`.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder around a `BufRead`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":18262,"byte_end":18307,"line_start":127,"line_end":127,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":18589,"byte_end":18604,"line_start":135,"line_end":135,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder<R>>::with_dictionary","value":"pub fn with_dictionary(R, i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing dictionary.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":18437,"byte_end":18493,"line_start":132,"line_end":132,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":18498,"byte_end":18501,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":18506,"byte_end":18577,"line_start":134,"line_end":134,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":19033,"byte_end":19057,"line_start":149,"line_end":149,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder<R>>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary(R, &EncoderDictionary) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing `EncoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing `EncoderDictionary`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":18872,"byte_end":18937,"line_start":146,"line_end":146,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":18942,"byte_end":18945,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":18950,"byte_end":19021,"line_start":148,"line_end":148,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":19389,"byte_end":19412,"line_start":160,"line_end":160,"column_start":12,"column_end":35},"name":"recommended_output_size","qualname":"<Encoder<R>>::recommended_output_size","value":"pub fn recommended_output_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Recommendation for the size of the output buffer.\n","sig":null,"attributes":[{"value":"/ Recommendation for the size of the output buffer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":19324,"byte_end":19377,"line_start":159,"line_end":159,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":19536,"byte_end":19543,"line_start":165,"line_end":165,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Encoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquire a reference to the underlying reader.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":19475,"byte_end":19524,"line_start":164,"line_end":164,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":19799,"byte_end":19806,"line_start":173,"line_end":173,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Encoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquire a mutable reference to the underlying reader.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":19599,"byte_end":19656,"line_start":169,"line_end":169,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":19661,"byte_end":19664,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":19669,"byte_end":19741,"line_start":171,"line_end":171,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":19746,"byte_end":19787,"line_start":172,"line_end":172,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":20048,"byte_end":20054,"line_start":181,"line_end":181,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder<R>>::finish","value":"pub fn finish(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Return the inner `Read`.","sig":null,"attributes":[{"value":"/ Return the inner `Read`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":19874,"byte_end":19902,"line_start":177,"line_end":177,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":19907,"byte_end":19910,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Calling `finish()` is not *required* after reading a stream -","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":19915,"byte_end":19980,"line_start":179,"line_end":179,"column_start":5,"column_end":70}},{"value":"/ just use it if you need to get the `Read` back.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":19985,"byte_end":20036,"line_start":180,"line_end":180,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":20209,"byte_end":20225,"line_start":186,"line_end":186,"column_start":12,"column_end":28},"name":"include_checksum","qualname":"<Encoder<R>>::include_checksum","value":"pub fn include_checksum(&mut Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Controls whether zstd should include a content checksum at the end of each frame.\n","sig":null,"attributes":[{"value":"/ Controls whether zstd should include a content checksum at the end of each frame.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":20112,"byte_end":20197,"line_start":185,"line_end":185,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":20753,"byte_end":20764,"line_start":200,"line_end":200,"column_start":12,"column_end":23},"name":"multithread","qualname":"<Encoder<R>>::multithread","value":"pub fn multithread(&mut Self, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Enables multithreaded compression","sig":null,"attributes":[{"value":"/ Enables multithreaded compression","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":20443,"byte_end":20480,"line_start":195,"line_end":195,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":20485,"byte_end":20488,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ * If `n_workers == 0` (default), then multithreaded will be disabled.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":20493,"byte_end":20566,"line_start":197,"line_end":197,"column_start":5,"column_end":78}},{"value":"/ * If `n_workers >= 1`, then compression will be done in separate threads.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":20571,"byte_end":20648,"line_start":198,"line_end":198,"column_start":5,"column_end":82}},{"value":"/   So even `n_workers = 1` may increase performance by separating IO and compression.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":20653,"byte_end":20741,"line_start":199,"line_end":199,"column_start":5,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":176},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::stream::write","value":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":211},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":224},{"krate":0,"index":242},{"krate":0,"index":246},{"krate":0,"index":255},{"krate":0,"index":259}],"decl_id":null,"docs":" Implement push-based [`Write`] trait for both compressing and decompressing.\n","sig":null,"attributes":[{"value":"/ Implement push-based [`Write`] trait for both compressing and decompressing.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":21471,"byte_end":21551,"line_start":1,"line_end":1,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":201},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":22211,"byte_end":22218,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::write::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":203}],"decl_id":null,"docs":" An encoder that compress and forward data to another writer.","sig":null,"attributes":[{"value":"/ An encoder that compress and forward data to another writer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":21866,"byte_end":21930,"line_start":21,"line_end":21,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":21931,"byte_end":21934,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This allows to compress a stream of data","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":21935,"byte_end":21979,"line_start":23,"line_end":23,"column_start":1,"column_end":45}},{"value":"/ (good for files or heavy network stream).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":21980,"byte_end":22025,"line_start":24,"line_end":24,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":22026,"byte_end":22029,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Don't forget to call [`finish()`] before dropping it!","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":22030,"byte_end":22087,"line_start":26,"line_end":26,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":22088,"byte_end":22091,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Note: The zstd library has its own internal input buffer (~128kb).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":22092,"byte_end":22162,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":22163,"byte_end":22166,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ [`finish()`]: #method.finish","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":22167,"byte_end":22199,"line_start":30,"line_end":30,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":204},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":22392,"byte_end":22399,"line_start":37,"line_end":37,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::write::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":206}],"decl_id":null,"docs":" A decoder that decompress and forward data to another writer.\n","sig":null,"attributes":[{"value":"/ A decoder that decompress and forward data to another writer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":22315,"byte_end":22380,"line_start":36,"line_end":36,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":207},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":22580,"byte_end":22597,"line_start":43,"line_end":43,"column_start":12,"column_end":29},"name":"AutoFinishEncoder","qualname":"::stream::write::AutoFinishEncoder","value":"AutoFinishEncoder {  }","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210}],"decl_id":null,"docs":" A wrapper around an `Encoder<W>` that finishes the stream on drop.\n","sig":null,"attributes":[{"value":"/ A wrapper around an `Encoder<W>` that finishes the stream on drop.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":22498,"byte_end":22568,"line_start":42,"line_end":42,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":23164,"byte_end":23171,"line_start":63,"line_end":63,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<AutoFinishEncoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":23102,"byte_end":23152,"line_start":62,"line_end":62,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":23448,"byte_end":23455,"line_start":71,"line_end":71,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AutoFinishEncoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":23247,"byte_end":23305,"line_start":67,"line_end":67,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":23310,"byte_end":23313,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":23318,"byte_end":23390,"line_start":69,"line_end":69,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":23395,"byte_end":23436,"line_start":70,"line_end":70,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24233,"byte_end":24236,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder<W>>::new","value":"pub fn new(W, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24076,"byte_end":24102,"line_start":96,"line_end":96,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24107,"byte_end":24110,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ `level`: compression level (1-21).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24115,"byte_end":24153,"line_start":98,"line_end":98,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24158,"byte_end":24161,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24166,"byte_end":24221,"line_start":100,"line_end":100,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24620,"byte_end":24635,"line_start":111,"line_end":111,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder<W>>::with_dictionary","value":"pub fn with_dictionary(W, i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing dictionary.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24343,"byte_end":24399,"line_start":105,"line_end":105,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24404,"byte_end":24407,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24412,"byte_end":24467,"line_start":107,"line_end":107,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24472,"byte_end":24540,"line_start":108,"line_end":108,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24545,"byte_end":24548,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24553,"byte_end":24608,"line_start":110,"line_end":110,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":25129,"byte_end":25153,"line_start":125,"line_end":125,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder<W>>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary(W, &EncoderDictionary) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing prepared `EncoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing prepared `EncoderDictionary`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24902,"byte_end":24976,"line_start":121,"line_end":121,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24981,"byte_end":24984,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24989,"byte_end":25044,"line_start":123,"line_end":123,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":25049,"byte_end":25117,"line_start":124,"line_end":124,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":25605,"byte_end":25616,"line_start":139,"line_end":139,"column_start":12,"column_end":23},"name":"auto_finish","qualname":"<Encoder<W>>::auto_finish","value":"pub fn auto_finish(Self) -> AutoFinishEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Returns a wrapper around `self` that will finish the stream on drop.","sig":null,"attributes":[{"value":"/ Returns a wrapper around `self` that will finish the stream on drop.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":25419,"byte_end":25491,"line_start":134,"line_end":134,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":25496,"byte_end":25499,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":25504,"byte_end":25515,"line_start":136,"line_end":136,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":25520,"byte_end":25523,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ Panics on drop if an error happens when finishing the stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":25528,"byte_end":25593,"line_start":138,"line_end":138,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":25879,"byte_end":25888,"line_start":148,"line_end":148,"column_start":12,"column_end":21},"name":"on_finish","qualname":"<Encoder<W>>::on_finish","value":"pub fn on_finish<F: 'static + FnMut(io::Result<W>) -> ()>(Self, F)\n-> AutoFinishEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Returns an encoder that will finish the stream on drop.","sig":null,"attributes":[{"value":"/ Returns an encoder that will finish the stream on drop.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":25734,"byte_end":25793,"line_start":145,"line_end":145,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":25798,"byte_end":25801,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Calls the given callback with the result from `finish()`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":25806,"byte_end":25867,"line_start":147,"line_end":147,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26098,"byte_end":26105,"line_start":156,"line_end":156,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Encoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26036,"byte_end":26086,"line_start":155,"line_end":155,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26362,"byte_end":26369,"line_start":164,"line_end":164,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Encoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26161,"byte_end":26219,"line_start":160,"line_end":160,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26224,"byte_end":26227,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26232,"byte_end":26304,"line_start":162,"line_end":162,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26309,"byte_end":26350,"line_start":163,"line_end":163,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26993,"byte_end":26999,"line_start":180,"line_end":180,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" **Required**: Finishes the stream.","sig":null,"attributes":[{"value":"/ **Required**: Finishes the stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26437,"byte_end":26475,"line_start":168,"line_end":168,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26480,"byte_end":26483,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26488,"byte_end":26561,"line_start":170,"line_end":170,"column_start":5,"column_end":78}},{"value":"/ this method or with [`try_finish(self)`](#method.try_finish).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26566,"byte_end":26631,"line_start":171,"line_end":171,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26636,"byte_end":26639,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ This returns the inner writer in case you need it.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26644,"byte_end":26698,"line_start":173,"line_end":173,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26703,"byte_end":26706,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ To get back `self` in case an error happened, use `try_finish`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26711,"byte_end":26778,"line_start":175,"line_end":175,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26783,"byte_end":26786,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ **Note**: If you don't want (or can't) call `finish()` manually after","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26791,"byte_end":26864,"line_start":177,"line_end":177,"column_start":5,"column_end":78}},{"value":"/           writing your data, consider using `auto_finish()` to get an","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26869,"byte_end":26942,"line_start":178,"line_end":178,"column_start":5,"column_end":78}},{"value":"/           `AutoFinishEncoder`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":26947,"byte_end":26981,"line_start":179,"line_end":179,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27532,"byte_end":27542,"line_start":194,"line_end":194,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<Encoder<W>>::try_finish","value":"pub fn try_finish(Self) -> Result<W, (Self, io::Error)>","parent":null,"children":[],"decl_id":null,"docs":" **Required**: Attempts to finish the stream.","sig":null,"attributes":[{"value":"/ **Required**: Attempts to finish the stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27086,"byte_end":27134,"line_start":184,"line_end":184,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27139,"byte_end":27142,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27147,"byte_end":27220,"line_start":186,"line_end":186,"column_start":5,"column_end":78}},{"value":"/ this method or with [`finish(self)`](#method.finish).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27225,"byte_end":27282,"line_start":187,"line_end":187,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27287,"byte_end":27290,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ This returns the inner writer if the finish was successful, or the","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27295,"byte_end":27365,"line_start":189,"line_end":189,"column_start":5,"column_end":75}},{"value":"/ object plus an error if it wasn't.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27370,"byte_end":27408,"line_start":190,"line_end":190,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27413,"byte_end":27416,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ `write` on this object will panic after `try_finish` has been called,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27421,"byte_end":27494,"line_start":192,"line_end":192,"column_start":5,"column_end":78}},{"value":"/ even if it fails.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27499,"byte_end":27520,"line_start":193,"line_end":193,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27980,"byte_end":27989,"line_start":206,"line_end":206,"column_start":12,"column_end":21},"name":"do_finish","qualname":"<Encoder<W>>::do_finish","value":"pub fn do_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attemps to finish the stream.","sig":null,"attributes":[{"value":"/ Attemps to finish the stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27787,"byte_end":27820,"line_start":202,"line_end":202,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27825,"byte_end":27828,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27833,"byte_end":27906,"line_start":204,"line_end":204,"column_start":5,"column_end":78}},{"value":"/ this method or with [`finish(self)`](#method.finish).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":27911,"byte_end":27968,"line_start":205,"line_end":205,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":28139,"byte_end":28161,"line_start":211,"line_end":211,"column_start":12,"column_end":34},"name":"recommended_input_size","qualname":"<Encoder<W>>::recommended_input_size","value":"pub fn recommended_input_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return a recommendation for the size of data to write at once.\n","sig":null,"attributes":[{"value":"/ Return a recommendation for the size of data to write at once.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":28061,"byte_end":28127,"line_start":210,"line_end":210,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":28320,"byte_end":28336,"line_start":216,"line_end":216,"column_start":12,"column_end":28},"name":"include_checksum","qualname":"<Encoder<W>>::include_checksum","value":"pub fn include_checksum(&mut Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Controls whether zstd should include a content checksum at the end of each frame.\n","sig":null,"attributes":[{"value":"/ Controls whether zstd should include a content checksum at the end of each frame.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":28223,"byte_end":28308,"line_start":215,"line_end":215,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":28864,"byte_end":28875,"line_start":230,"line_end":230,"column_start":12,"column_end":23},"name":"multithread","qualname":"<Encoder<W>>::multithread","value":"pub fn multithread(&mut Self, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Enables multithreaded compression","sig":null,"attributes":[{"value":"/ Enables multithreaded compression","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":28554,"byte_end":28591,"line_start":225,"line_end":225,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":28596,"byte_end":28599,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ * If `n_workers == 0` (default), then multithreaded will be disabled.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":28604,"byte_end":28677,"line_start":227,"line_end":227,"column_start":5,"column_end":78}},{"value":"/ * If `n_workers >= 1`, then compression will be done in separate threads.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":28682,"byte_end":28759,"line_start":228,"line_end":228,"column_start":5,"column_end":82}},{"value":"/   So even `n_workers = 1` may increase performance by separating IO and compression.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":28764,"byte_end":28852,"line_start":229,"line_end":229,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":29584,"byte_end":29587,"line_start":259,"line_end":259,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder<W>>::new","value":"pub fn new(W) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":29546,"byte_end":29572,"line_start":258,"line_end":258,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":29884,"byte_end":29899,"line_start":267,"line_end":267,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder<W>>::with_dictionary","value":"pub fn with_dictionary(W, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing dictionary.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":29675,"byte_end":29731,"line_start":263,"line_end":263,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":29736,"byte_end":29739,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":29744,"byte_end":29799,"line_start":265,"line_end":265,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":29804,"byte_end":29872,"line_start":266,"line_end":266,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":30343,"byte_end":30367,"line_start":277,"line_end":277,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder<W>>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary(W, &DecoderDictionary) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing prepared `DecoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing prepared `DecoderDictionary`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":30116,"byte_end":30190,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":30195,"byte_end":30198,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":30203,"byte_end":30258,"line_start":275,"line_end":275,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":30263,"byte_end":30331,"line_start":276,"line_end":276,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":30695,"byte_end":30702,"line_start":287,"line_end":287,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Decoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":30633,"byte_end":30683,"line_start":286,"line_end":286,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":30959,"byte_end":30966,"line_start":295,"line_end":295,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Decoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":30758,"byte_end":30816,"line_start":291,"line_end":291,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":30821,"byte_end":30824,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":30829,"byte_end":30901,"line_start":293,"line_end":293,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":30906,"byte_end":30947,"line_start":294,"line_end":294,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":31076,"byte_end":31086,"line_start":300,"line_end":300,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Decoder<W>>::into_inner","value":"pub fn into_inner(Self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner `Write`.\n","sig":null,"attributes":[{"value":"/ Returns the inner `Write`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":31034,"byte_end":31064,"line_start":299,"line_end":299,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":31224,"byte_end":31246,"line_start":305,"line_end":305,"column_start":12,"column_end":34},"name":"recommended_input_size","qualname":"<Decoder<W>>::recommended_input_size","value":"pub fn recommended_input_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return a recommendation for the size of data to write at once.\n","sig":null,"attributes":[{"value":"/ Return a recommendation for the size of data to write at once.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":31146,"byte_end":31212,"line_start":304,"line_end":304,"column_start":5,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":273},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":32028,"byte_end":32038,"line_start":8,"line_end":8,"column_start":8,"column_end":18},"name":"decode_all","qualname":"::stream::functions::decode_all","value":"pub fn decode_all<R: io::Read>(R) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompress from the given source as if using a `Decoder`.","sig":null,"attributes":[{"value":"/ Decompress from the given source as if using a `Decoder`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":31902,"byte_end":31963,"line_start":5,"line_end":5,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":31964,"byte_end":31967,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The input data must be in the zstd frame format.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":31968,"byte_end":32020,"line_start":7,"line_end":7,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":275},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":32308,"byte_end":32319,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"copy_decode","qualname":"::stream::functions::copy_decode","value":"pub fn copy_decode<R, W>(R, W) -> io::Result<()> where R: io::Read,\nW: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Decompress from the given source as if using a `Decoder`.","sig":null,"attributes":[{"value":"/ Decompress from the given source as if using a `Decoder`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":32178,"byte_end":32239,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":32240,"byte_end":32243,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Decompressed data will be appended to `destination`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":32244,"byte_end":32300,"line_start":16,"line_end":16,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":278},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":32710,"byte_end":32720,"line_start":32,"line_end":32,"column_start":8,"column_end":18},"name":"encode_all","qualname":"::stream::functions::encode_all","value":"pub fn encode_all<R: io::Read>(R, i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compress all data from the given source as if using an `Encoder`.","sig":null,"attributes":[{"value":"/ Compress all data from the given source as if using an `Encoder`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":32524,"byte_end":32593,"line_start":27,"line_end":27,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":32594,"byte_end":32597,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Result will be in the zstd frame format.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":32598,"byte_end":32642,"line_start":29,"line_end":29,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":32643,"byte_end":32646,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":32647,"byte_end":32702,"line_start":31,"line_end":31,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":280},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":33081,"byte_end":33092,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"copy_encode","qualname":"::stream::functions::copy_encode","value":"pub fn copy_encode<R, W>(R, W, i32) -> io::Result<()> where R: io::Read,\nW: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Compress all data from the given source as if using an `Encoder`.","sig":null,"attributes":[{"value":"/ Compress all data from the given source as if using an `Encoder`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":32885,"byte_end":32954,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":32955,"byte_end":32958,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Compressed data will be appended to `destination`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":32959,"byte_end":33013,"line_start":40,"line_end":40,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":33014,"byte_end":33017,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/functions.rs","byte_start":33018,"byte_end":33073,"line_start":42,"line_end":42,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":283},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"zio","qualname":"::stream::zio","value":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/mod.rs","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":328},{"krate":0,"index":377},{"krate":0,"index":380}],"decl_id":null,"docs":" Wrappers around raw operations implementing `std::io::{Read, Write}`.\n","sig":null,"attributes":[{"value":"/ Wrappers around raw operations implementing `std::io::{Read, Write}`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/mod.rs","byte_start":33382,"byte_end":33455,"line_start":1,"line_end":1,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":305},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":33938,"byte_end":33944,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"Reader","qualname":"::stream::zio::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312}],"decl_id":null,"docs":" Implements the [`Read`] API around an [`Operation`].","sig":null,"attributes":[{"value":"/ Implements the [`Read`] API around an [`Operation`].","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":33671,"byte_end":33727,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":33728,"byte_end":33731,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This can be used to wrap a raw in-memory operation in a read-focused API.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":33732,"byte_end":33809,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":33810,"byte_end":33813,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ It can wrap either a compression or decompression operation, and pulls","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":33814,"byte_end":33888,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ input data from a wrapped `Read`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":33889,"byte_end":33926,"line_start":11,"line_end":11,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34212,"byte_end":34215,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R, D>>::new","value":"pub fn new(R, D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Reader`.","sig":null,"attributes":[{"value":"/ Creates a new `Reader`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34091,"byte_end":34118,"line_start":23,"line_end":23,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34123,"byte_end":34126,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ `reader` will be used to pull input data for the given operation.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34131,"byte_end":34200,"line_start":25,"line_end":25,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34495,"byte_end":34511,"line_start":37,"line_end":37,"column_start":12,"column_end":28},"name":"set_single_frame","qualname":"<Reader<R, D>>::set_single_frame","value":"pub fn set_single_frame(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Sets `self` to stop after the first decoded frame.\n","sig":null,"attributes":[{"value":"/ Sets `self` to stop after the first decoded frame.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34429,"byte_end":34483,"line_start":36,"line_end":36,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34642,"byte_end":34655,"line_start":42,"line_end":42,"column_start":12,"column_end":25},"name":"operation_mut","qualname":"<Reader<R, D>>::operation_mut","value":"pub fn operation_mut(&mut Self) -> &mut D","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying operation.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying operation.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34570,"byte_end":34630,"line_start":41,"line_end":41,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34787,"byte_end":34797,"line_start":47,"line_end":47,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<Reader<R, D>>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying reader.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34718,"byte_end":34775,"line_start":46,"line_end":46,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34918,"byte_end":34924,"line_start":52,"line_end":52,"column_start":12,"column_end":18},"name":"reader","qualname":"<Reader<R, D>>::reader","value":"pub fn reader(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying reader.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34857,"byte_end":34906,"line_start":51,"line_end":51,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":35013,"byte_end":35023,"line_start":57,"line_end":57,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R, D>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner reader.\n","sig":null,"attributes":[{"value":"/ Returns the inner reader.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34972,"byte_end":35001,"line_start":56,"line_end":56,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":346},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":39702,"byte_end":39708,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Writer","qualname":"::stream::zio::writer::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354}],"decl_id":null,"docs":" Implements the [`Write`] API around an [`Operation`].","sig":null,"attributes":[{"value":"/ Implements the [`Write`] API around an [`Operation`].","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":39435,"byte_end":39492,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":39493,"byte_end":39496,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This can be used to wrap a raw in-memory operation in a write-focused API.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":39497,"byte_end":39575,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":39576,"byte_end":39579,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ It can be used with either compression or decompression, and forwards the","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":39580,"byte_end":39657,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ output to a wrapped `Write`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":39658,"byte_end":39690,"line_start":12,"line_end":12,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":40153,"byte_end":40156,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Writer<W, D>>::new","value":"pub fn new(W, D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Writer`.","sig":null,"attributes":[{"value":"/ Creates a new `Writer`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":40031,"byte_end":40058,"line_start":32,"line_end":32,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":40063,"byte_end":40066,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ All output from the given operation will be forwarded to `writer`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":40071,"byte_end":40141,"line_start":34,"line_end":34,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":40799,"byte_end":40805,"line_start":58,"line_end":58,"column_start":12,"column_end":18},"name":"finish","qualname":"<Writer<W, D>>::finish","value":"pub fn finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Ends the stream.","sig":null,"attributes":[{"value":"/ Ends the stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":40465,"byte_end":40485,"line_start":49,"line_end":49,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":40490,"byte_end":40493,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This *must* be called after all data has been written to finish the","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":40498,"byte_end":40569,"line_start":51,"line_end":51,"column_start":5,"column_end":76}},{"value":"/ stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":40574,"byte_end":40585,"line_start":52,"line_end":52,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":40590,"byte_end":40593,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ If you forget to call this and just drop the `Writer`, you *will* have","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":40598,"byte_end":40672,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ an incomplete output.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":40677,"byte_end":40702,"line_start":55,"line_end":55,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":40707,"byte_end":40710,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ Keep calling it until it returns `Ok(())`, then don't call it again.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":40715,"byte_end":40787,"line_start":57,"line_end":57,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":43539,"byte_end":43549,"line_start":138,"line_end":138,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Writer<W, D>>::into_inner","value":"pub fn into_inner(Self) -> (W, D)","parent":null,"children":[],"decl_id":null,"docs":" Return the wrapped `Writer` and `Operation`.","sig":null,"attributes":[{"value":"/ Return the wrapped `Writer` and `Operation`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":43362,"byte_end":43410,"line_start":134,"line_end":134,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":43415,"byte_end":43418,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ Careful: if you call this before calling [`Writer::finish()`], the","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":43423,"byte_end":43493,"line_start":136,"line_end":136,"column_start":5,"column_end":75}},{"value":"/ output may be incomplete.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":43498,"byte_end":43527,"line_start":137,"line_end":137,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":43671,"byte_end":43677,"line_start":143,"line_end":143,"column_start":12,"column_end":18},"name":"writer","qualname":"<Writer<W, D>>::writer","value":"pub fn writer(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Gives a reference to the inner writer.\n","sig":null,"attributes":[{"value":"/ Gives a reference to the inner writer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":43617,"byte_end":43659,"line_start":142,"line_end":142,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":43787,"byte_end":43797,"line_start":148,"line_end":148,"column_start":12,"column_end":22},"name":"writer_mut","qualname":"<Writer<W, D>>::writer_mut","value":"pub fn writer_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Gives a mutable reference to the inner writer.\n","sig":null,"attributes":[{"value":"/ Gives a mutable reference to the inner writer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":43725,"byte_end":43775,"line_start":147,"line_end":147,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":43914,"byte_end":43923,"line_start":153,"line_end":153,"column_start":12,"column_end":21},"name":"operation","qualname":"<Writer<W, D>>::operation","value":"pub fn operation(&Self) -> &D","parent":null,"children":[],"decl_id":null,"docs":" Gives a reference to the inner operation.\n","sig":null,"attributes":[{"value":"/ Gives a reference to the inner operation.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":43857,"byte_end":43902,"line_start":152,"line_end":152,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":44039,"byte_end":44052,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"name":"operation_mut","qualname":"<Writer<W, D>>::operation_mut","value":"pub fn operation_mut(&mut Self) -> &mut D","parent":null,"children":[],"decl_id":null,"docs":" Gives a mutable reference to the inner operation.\n","sig":null,"attributes":[{"value":"/ Gives a mutable reference to the inner operation.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":43974,"byte_end":44027,"line_start":157,"line_end":157,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":383},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw","qualname":"::stream::raw","value":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":391},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":404},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":431},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":442}],"decl_id":null,"docs":" Raw in-memory stream compression/decompression.","sig":null,"attributes":[{"value":"/ Raw in-memory stream compression/decompression.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":47911,"byte_end":47962,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":47963,"byte_end":47966,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module defines a `Decoder` and an `Encoder` to decode/encode streams","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":47967,"byte_end":48044,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ of data using buffers.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48045,"byte_end":48071,"line_start":4,"line_end":4,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48072,"byte_end":48075,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ They are mostly thin wrappers around `zstd_safe::{DCtx, CCtx}`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48076,"byte_end":48143,"line_start":6,"line_end":6,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":410},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48440,"byte_end":48449,"line_start":17,"line_end":17,"column_start":11,"column_end":20},"name":"Operation","qualname":"::stream::raw::Operation","value":"Operation","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415}],"decl_id":null,"docs":" Represents an abstract compression/decompression operation.","sig":null,"attributes":[{"value":"/ Represents an abstract compression/decompression operation.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48310,"byte_end":48373,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48374,"byte_end":48377,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This trait covers both `Encoder` and `Decoder`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48378,"byte_end":48429,"line_start":16,"line_end":16,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48669,"byte_end":48672,"line_start":24,"line_end":24,"column_start":8,"column_end":11},"name":"run","qualname":"::stream::raw::Operation::run","value":"pub fn run(&mut Self, &mut InBuffer, &mut OutBuffer) -> io::Result<usize>","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" Performs a single step of this operation.","sig":null,"attributes":[{"value":"/ Performs a single step of this operation.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48456,"byte_end":48501,"line_start":18,"line_end":18,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48506,"byte_end":48509,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ Should return a hint for the next input size.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48514,"byte_end":48563,"line_start":20,"line_end":20,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48568,"byte_end":48571,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ If the result is `Ok(0)`, it may indicate that a frame was just","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48576,"byte_end":48643,"line_start":22,"line_end":22,"column_start":5,"column_end":72}},{"value":"/ finished.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48648,"byte_end":48661,"line_start":23,"line_end":23,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48982,"byte_end":48996,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"run_on_buffers","qualname":"::stream::raw::Operation::run_on_buffers","value":"pub fn run_on_buffers(&mut Self, &[u8], &mut [u8]) -> io::Result<Status>","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" Performs a single step of this operation.","sig":null,"attributes":[{"value":"/ Performs a single step of this operation.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48796,"byte_end":48841,"line_start":30,"line_end":30,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48846,"byte_end":48849,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ This is a comvenience wrapper around `Operation::run` if you don't","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48854,"byte_end":48924,"line_start":32,"line_end":32,"column_start":5,"column_end":75}},{"value":"/ want to deal with `InBuffer`/`OutBuffer`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":48929,"byte_end":48974,"line_start":33,"line_end":33,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":49577,"byte_end":49582,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"flush","qualname":"::stream::raw::Operation::flush","value":"pub fn flush(&mut Self, &mut OutBuffer) -> io::Result<usize>","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" Flushes any internal buffer, if any.","sig":null,"attributes":[{"value":"/ Flushes any internal buffer, if any.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":49398,"byte_end":49438,"line_start":51,"line_end":51,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":49443,"byte_end":49446,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes still in the buffer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":49451,"byte_end":49503,"line_start":53,"line_end":53,"column_start":5,"column_end":57}},{"value":"/ To flush entirely, keep calling until it returns `Ok(0)`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":49508,"byte_end":49569,"line_start":54,"line_end":54,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":49818,"byte_end":49824,"line_start":63,"line_end":63,"column_start":8,"column_end":14},"name":"reinit","qualname":"::stream::raw::Operation::reinit","value":"pub fn reinit(&mut Self) -> io::Result<()>","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" Prepares the operation for a new frame.","sig":null,"attributes":[{"value":"/ Prepares the operation for a new frame.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":49694,"byte_end":49737,"line_start":60,"line_end":60,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":49742,"byte_end":49745,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ This is hopefully cheaper than creating a new operation.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":49750,"byte_end":49810,"line_start":62,"line_end":62,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":50123,"byte_end":50129,"line_start":73,"line_end":73,"column_start":8,"column_end":14},"name":"finish","qualname":"::stream::raw::Operation::finish","value":"pub fn finish(&mut Self, &mut OutBuffer, bool) -> io::Result<usize>","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" Finishes the operation, writing any footer if necessary.","sig":null,"attributes":[{"value":"/ Finishes the operation, writing any footer if necessary.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":49882,"byte_end":49942,"line_start":67,"line_end":67,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":49947,"byte_end":49950,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes still to write.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":49955,"byte_end":50002,"line_start":69,"line_end":69,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":50007,"byte_end":50010,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Keep calling this method until it returns `Ok(0)`,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":50015,"byte_end":50069,"line_start":71,"line_end":71,"column_start":5,"column_end":59}},{"value":"/ and then don't ever call this method.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":50074,"byte_end":50115,"line_start":72,"line_end":72,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":416},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":50397,"byte_end":50401,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"NoOp","qualname":"::stream::raw::NoOp","value":"","parent":null,"children":[],"decl_id":null,"docs":" Dummy operation that just copies its input to the output.\n","sig":null,"attributes":[{"value":"/ Dummy operation that just copies its input to the output.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":50324,"byte_end":50385,"line_start":84,"line_end":84,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":420},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":50936,"byte_end":50942,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"name":"Status","qualname":"::stream::raw::Status","value":"Status { remaining, bytes_read, bytes_written }","parent":null,"children":[{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423}],"decl_id":null,"docs":" Describes the result of an operation.\n","sig":null,"attributes":[{"value":"/ Describes the result of an operation.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":50883,"byte_end":50924,"line_start":108,"line_end":108,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":421},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51039,"byte_end":51048,"line_start":113,"line_end":113,"column_start":9,"column_end":18},"name":"remaining","qualname":"::stream::raw::Status::remaining","value":"usize","parent":{"krate":0,"index":420},"children":[],"decl_id":null,"docs":" Number of bytes expected for next input.","sig":null,"attributes":[{"value":"/ Number of bytes expected for next input.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":50949,"byte_end":50993,"line_start":110,"line_end":110,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":50998,"byte_end":51001,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ This is just a hint.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51006,"byte_end":51030,"line_start":112,"line_end":112,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":422},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51111,"byte_end":51121,"line_start":116,"line_end":116,"column_start":9,"column_end":19},"name":"bytes_read","qualname":"::stream::raw::Status::bytes_read","value":"usize","parent":{"krate":0,"index":420},"children":[],"decl_id":null,"docs":" Number of bytes read from the input.\n","sig":null,"attributes":[{"value":"/ Number of bytes read from the input.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51062,"byte_end":51102,"line_start":115,"line_end":115,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":423},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51186,"byte_end":51199,"line_start":119,"line_end":119,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::stream::raw::Status::bytes_written","value":"usize","parent":{"krate":0,"index":420},"children":[],"decl_id":null,"docs":" Number of bytes written to the output.\n","sig":null,"attributes":[{"value":"/ Number of bytes written to the output.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51135,"byte_end":51177,"line_start":118,"line_end":118,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":424},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51268,"byte_end":51275,"line_start":123,"line_end":123,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::raw::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":425}],"decl_id":null,"docs":" An in-memory decoder for streams of data.\n","sig":null,"attributes":[{"value":"/ An in-memory decoder for streams of data.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51211,"byte_end":51256,"line_start":122,"line_end":122,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51377,"byte_end":51380,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new() -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51339,"byte_end":51365,"line_start":128,"line_end":128,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51527,"byte_end":51542,"line_start":134,"line_end":134,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"pub fn with_dictionary(&[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder initialized with the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder initialized with the given dictionary.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51451,"byte_end":51515,"line_start":133,"line_end":133,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51867,"byte_end":51891,"line_start":142,"line_end":142,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary(&DecoderDictionary) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing `DecoderDictionary`.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing `DecoderDictionary`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51790,"byte_end":51855,"line_start":141,"line_end":141,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":52278,"byte_end":52291,"line_start":155,"line_end":155,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Decoder>::set_parameter","value":"pub fn set_parameter(&mut Self, DParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a decompression parameter for this decoder.\n","sig":null,"attributes":[{"value":"/ Sets a decompression parameter for this decoder.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":52214,"byte_end":52266,"line_start":154,"line_end":154,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":435},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":53293,"byte_end":53300,"line_start":193,"line_end":193,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::raw::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":436}],"decl_id":null,"docs":" An in-memory encoder for streams of data.\n","sig":null,"attributes":[{"value":"/ An in-memory encoder for streams of data.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":53236,"byte_end":53281,"line_start":192,"line_end":192,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":53402,"byte_end":53405,"line_start":199,"line_end":199,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":53364,"byte_end":53390,"line_start":198,"line_end":198,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":53569,"byte_end":53584,"line_start":204,"line_end":204,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"pub fn with_dictionary(i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder initialized with the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder initialized with the given dictionary.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":53493,"byte_end":53557,"line_start":203,"line_end":203,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":53927,"byte_end":53951,"line_start":212,"line_end":212,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary(&EncoderDictionary) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder using an existing `EncoderDictionary`.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder using an existing `EncoderDictionary`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":53851,"byte_end":53915,"line_start":211,"line_end":211,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":54336,"byte_end":54349,"line_start":225,"line_end":225,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Encoder>::set_parameter","value":"pub fn set_parameter(&mut Self, CParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a compression parameter for this encoder.\n","sig":null,"attributes":[{"value":"/ Sets a compression parameter for this encoder.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":54274,"byte_end":54324,"line_start":224,"line_end":224,"column_start":5,"column_end":55}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":4952,"byte_end":4962,"line_start":16,"line_end":16,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":7197,"byte_end":7209,"line_start":15,"line_end":15,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9711,"byte_end":9728,"line_start":30,"line_end":30,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10254,"byte_end":10271,"line_start":51,"line_end":51,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15333,"byte_end":15340,"line_start":31,"line_end":31,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15592,"byte_end":15599,"line_start":40,"line_end":40,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17657,"byte_end":17664,"line_start":104,"line_end":104,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17967,"byte_end":17974,"line_start":117,"line_end":117,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":18245,"byte_end":18252,"line_start":126,"line_end":126,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":20968,"byte_end":20975,"line_start":207,"line_end":207,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":22828,"byte_end":22845,"line_start":51,"line_end":51,"column_start":16,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":23561,"byte_end":23578,"line_start":76,"line_end":76,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":23805,"byte_end":23822,"line_start":85,"line_end":85,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24059,"byte_end":24066,"line_start":95,"line_end":95,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":29078,"byte_end":29085,"line_start":237,"line_end":237,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":29529,"byte_end":29536,"line_start":257,"line_end":257,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":31331,"byte_end":31338,"line_start":310,"line_end":310,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34072,"byte_end":34078,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":35624,"byte_end":35630,"line_start":82,"line_end":82,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":39974,"byte_end":39980,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":361},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":44435,"byte_end":44441,"line_start":175,"line_end":175,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":50423,"byte_end":50427,"line_start":87,"line_end":87,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51325,"byte_end":51332,"line_start":127,"line_end":127,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":52496,"byte_end":52503,"line_start":162,"line_end":162,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":53350,"byte_end":53357,"line_start":197,"line_end":197,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":54554,"byte_end":54561,"line_start":232,"line_end":232,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":668,"byte_end":673,"line_start":27,"line_end":27,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":683,"byte_end":687,"line_start":28,"line_end":28,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":53}},{"kind":"Mod","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/lib.rs","byte_start":697,"byte_end":703,"line_start":29,"line_end":29,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":99}},{"kind":"Mod","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14324,"byte_end":14328,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":100}},{"kind":"Mod","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14338,"byte_end":14343,"line_start":10,"line_end":10,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":176}},{"kind":"Mod","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14369,"byte_end":14372,"line_start":13,"line_end":13,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":283}},{"kind":"Mod","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/mod.rs","byte_start":14408,"byte_end":14411,"line_start":18,"line_end":18,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":383}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/compressor.rs","byte_start":4952,"byte_end":4962,"line_start":16,"line_end":16,"column_start":6,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":490},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/block/decompressor.rs","byte_start":7197,"byte_end":7209,"line_start":15,"line_end":15,"column_start":6,"column_end":18},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":495},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":9711,"byte_end":9728,"line_start":30,"line_end":30,"column_start":10,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":77},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/dict.rs","byte_start":10254,"byte_end":10271,"line_start":51,"line_end":51,"column_start":10,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":84},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15333,"byte_end":15340,"line_start":31,"line_end":31,"column_start":15,"column_end":22},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":131},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":15592,"byte_end":15599,"line_start":40,"line_end":40,"column_start":18,"column_end":25},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":131},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17657,"byte_end":17664,"line_start":104,"line_end":104,"column_start":27,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":131},"to":{"krate":1,"index":4726}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":17967,"byte_end":17974,"line_start":117,"line_end":117,"column_start":15,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":18245,"byte_end":18252,"line_start":126,"line_end":126,"column_start":18,"column_end":25},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/read/mod.rs","byte_start":20968,"byte_end":20975,"line_start":207,"line_end":207,"column_start":27,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":134},"to":{"krate":1,"index":4726}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":22828,"byte_end":22845,"line_start":51,"line_end":51,"column_start":16,"column_end":33},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":23561,"byte_end":23578,"line_start":76,"line_end":76,"column_start":25,"column_end":42},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":207},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":23805,"byte_end":23822,"line_start":85,"line_end":85,"column_start":26,"column_end":43},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":207},"to":{"krate":1,"index":4783}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":24059,"byte_end":24066,"line_start":95,"line_end":95,"column_start":16,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":201},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":29078,"byte_end":29085,"line_start":237,"line_end":237,"column_start":26,"column_end":33},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":201},"to":{"krate":1,"index":4783}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":29529,"byte_end":29536,"line_start":257,"line_end":257,"column_start":16,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/write/mod.rs","byte_start":31331,"byte_end":31338,"line_start":310,"line_end":310,"column_start":26,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":204},"to":{"krate":1,"index":4783}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":34072,"byte_end":34078,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/reader.rs","byte_start":35624,"byte_end":35630,"line_start":82,"line_end":82,"column_start":21,"column_end":27},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":305},"to":{"krate":1,"index":4726}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":39974,"byte_end":39980,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":346},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/zio/writer.rs","byte_start":44435,"byte_end":44441,"line_start":175,"line_end":175,"column_start":22,"column_end":28},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":346},"to":{"krate":1,"index":4783}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":50423,"byte_end":50427,"line_start":87,"line_end":87,"column_start":20,"column_end":24},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":416},"to":{"krate":0,"index":410}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":51325,"byte_end":51332,"line_start":127,"line_end":127,"column_start":6,"column_end":13},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":52496,"byte_end":52503,"line_start":162,"line_end":162,"column_start":20,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":424},"to":{"krate":0,"index":410}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":53350,"byte_end":53357,"line_start":197,"line_end":197,"column_start":6,"column_end":13},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.5.4+zstd.1.4.7/src/stream/raw.rs","byte_start":54554,"byte_end":54561,"line_start":232,"line_end":232,"column_start":20,"column_end":27},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":435},"to":{"krate":0,"index":410}}]}
{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3","program":"/home/nic/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bzip2","/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=046a5030c3b193a3","-C","extra-filename=-046a5030c3b193a3","--out-dir","/home/nic/Documents/solana/solana-blockchain-developer-bootcamp/day1/gm-program/target/rls/debug/deps","-L","dependency=/home/nic/Documents/solana/solana-blockchain-developer-bootcamp/day1/gm-program/target/rls/debug/deps","--extern","bzip2_sys=/home/nic/Documents/solana/solana-blockchain-developer-bootcamp/day1/gm-program/target/rls/debug/deps/libbzip2_sys-79abce2c539f17ec.rmeta","--extern","libc=/home/nic/Documents/solana/solana-blockchain-developer-bootcamp/day1/gm-program/target/rls/debug/deps/liblibc-0c9090286a281d3a.rmeta","--cap-lints","allow","-L","native=/home/nic/Documents/solana/solana-blockchain-developer-bootcamp/day1/gm-program/target/rls/debug/build/bzip2-sys-3e16a82f1c0e7edc/out/lib","--error-format=json","--sysroot","/home/nic/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/nic/Documents/solana/solana-blockchain-developer-bootcamp/day1/gm-program/target/rls/debug/deps/libbzip2-046a5030c3b193a3.rmeta"},"prelude":{"crate_id":{"name":"bzip2","disambiguator":[11121905044167331462,0]},"crate_root":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src","external_crates":[{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[266559774140218402,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[308958561119313021,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16887813381474488870,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18138047136180876386,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[16720472299414307338,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5531791840279234689,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2995214285932701362,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17222063258158154566,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[7245893233601562531,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[4839492760463372304,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[1226649225884195013,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[12460504831400488231,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[2536915343129323536,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[4342342869490546433,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2139538778087984071,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":20,"id":{"name":"bzip2_sys","disambiguator":[5160512622871184384,0]}},{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","num":21,"id":{"name":"libc","disambiguator":[11407690004646896535,0]}}],"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":0,"byte_end":2739,"line_start":1,"line_end":85,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":51},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2262,"byte_end":2270,"line_start":67,"line_end":67,"column_start":15,"column_end":23},"alias_span":null,"name":"Compress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":53},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2272,"byte_end":2282,"line_start":67,"line_end":67,"column_start":25,"column_end":35},"alias_span":null,"name":"Decompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":283},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2284,"byte_end":2290,"line_start":67,"line_end":67,"column_start":37,"column_end":43},"alias_span":null,"name":"Action","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":304},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2292,"byte_end":2298,"line_start":67,"line_end":67,"column_start":45,"column_end":51},"alias_span":null,"name":"Status","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":328},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2300,"byte_end":2305,"line_start":67,"line_end":67,"column_start":53,"column_end":58},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":0,"byte_end":2739,"line_start":1,"line_end":85,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":94},{"krate":0,"index":159},{"krate":0,"index":210},{"krate":0,"index":350},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":363}],"decl_id":null,"docs":" Bzip compression for Rust","sig":null,"attributes":[{"value":"/ Bzip compression for Rust","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":0,"byte_end":29,"line_start":1,"line_end":1,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":30,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This library contains bindings to libbz2 to support bzip compression and","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":34,"byte_end":110,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"/ decompression for Rust. The streams offered in this library are primarily","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":111,"byte_end":188,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"/ found in the `reader` and `writer` modules. Both compressors and","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":189,"byte_end":257,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ decompressors are available in each module depending on what operation you","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":258,"byte_end":336,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ need.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":337,"byte_end":346,"line_start":7,"line_end":7,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":347,"byte_end":350,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Access to the raw decompression/compression stream is also provided through","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":351,"byte_end":430,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ the `raw` module which has a much closer interface to libbz2.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":431,"byte_end":496,"line_start":10,"line_end":10,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":497,"byte_end":500,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":501,"byte_end":514,"line_start":12,"line_end":12,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":515,"byte_end":518,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":519,"byte_end":526,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":527,"byte_end":555,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/ use bzip2::Compression;","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":556,"byte_end":583,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/ use bzip2::read::{BzEncoder, BzDecoder};","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":584,"byte_end":628,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":629,"byte_end":632,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // Round trip some bytes from a byte source, into a compressor, into a","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":633,"byte_end":707,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ // decompressor, and finally into a vector.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":708,"byte_end":755,"line_start":20,"line_end":20,"column_start":1,"column_end":48}},{"value":"/ let data = \"Hello, World!\".as_bytes();","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":756,"byte_end":798,"line_start":21,"line_end":21,"column_start":1,"column_end":43}},{"value":"/ let compressor = BzEncoder::new(data, Compression::Best);","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":799,"byte_end":860,"line_start":22,"line_end":22,"column_start":1,"column_end":62}},{"value":"/ let mut decompressor = BzDecoder::new(compressor);","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":861,"byte_end":915,"line_start":23,"line_end":23,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":916,"byte_end":919,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let mut contents = String::new();","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":920,"byte_end":957,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/ decompressor.read_to_string(&mut contents).unwrap();","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":958,"byte_end":1014,"line_start":26,"line_end":26,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(contents, \"Hello, World!\");","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1015,"byte_end":1057,"line_start":27,"line_end":27,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1058,"byte_end":1065,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1066,"byte_end":1069,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Async I/O","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1070,"byte_end":1085,"line_start":30,"line_end":30,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1086,"byte_end":1089,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This crate optionally can support async I/O streams with the Tokio stack via","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1090,"byte_end":1170,"line_start":32,"line_end":32,"column_start":1,"column_end":81}},{"value":"/ the `tokio` feature of this crate:","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1171,"byte_end":1209,"line_start":33,"line_end":33,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1210,"byte_end":1213,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1214,"byte_end":1225,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/ bzip2 = { version = \"0.3\", features = [\"tokio\"] }","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1226,"byte_end":1279,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1280,"byte_end":1287,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1288,"byte_end":1291,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ All methods are internally capable of working with streams that may return","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1292,"byte_end":1370,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ `ErrorKind::WouldBlock` when they're not ready to perform the particular","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1371,"byte_end":1447,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ operation.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1448,"byte_end":1462,"line_start":41,"line_end":41,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1463,"byte_end":1466,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Note that care needs to be taken when using these objects, however. The","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1467,"byte_end":1542,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ Tokio runtime, in particular, requires that data is fully flushed before","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1543,"byte_end":1619,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ dropping streams. For compatibility with blocking streams all streams are","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1620,"byte_end":1697,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/ flushed/written when they are dropped, and this is not always a suitable","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1698,"byte_end":1774,"line_start":46,"line_end":46,"column_start":1,"column_end":77}},{"value":"/ time to perform I/O. If I/O streams are flushed before drop, however, then","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1775,"byte_end":1853,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ these operations will be a noop.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1854,"byte_end":1890,"line_start":48,"line_end":48,"column_start":1,"column_end":37}},{"value":"deny(missing_docs, warnings)","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":1892,"byte_end":1924,"line_start":50,"line_end":50,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":51},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3067,"byte_end":3075,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"Compress","qualname":"::mem::Compress","value":"Compress {  }","parent":null,"children":[{"krate":0,"index":52}],"decl_id":null,"docs":" Representation of an in-memory compression stream.","sig":null,"attributes":[{"value":"/ Representation of an in-memory compression stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":2921,"byte_end":2975,"line_start":13,"line_end":13,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":2976,"byte_end":2979,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ An instance of `Compress` can be used to compress a stream of bz2 data.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":2980,"byte_end":3055,"line_start":15,"line_end":15,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":53},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3274,"byte_end":3284,"line_start":24,"line_end":24,"column_start":12,"column_end":22},"name":"Decompress","qualname":"::mem::Decompress","value":"Decompress {  }","parent":null,"children":[{"krate":0,"index":54}],"decl_id":null,"docs":" Representation of an in-memory decompression stream.","sig":null,"attributes":[{"value":"/ Representation of an in-memory decompression stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3113,"byte_end":3169,"line_start":20,"line_end":20,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3170,"byte_end":3173,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ An instance of `Decompress` can be used to inflate a stream of bz2-encoded","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3174,"byte_end":3252,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ data.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3253,"byte_end":3262,"line_start":23,"line_end":23,"column_start":1,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":284},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3843,"byte_end":3846,"line_start":48,"line_end":48,"column_start":5,"column_end":8},"name":"Run","qualname":"::mem::Action::Run","value":"Action::Run","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Normal compression.\n","sig":null,"attributes":[{"value":"/ Normal compression.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3815,"byte_end":3838,"line_start":47,"line_end":47,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":287},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3940,"byte_end":3945,"line_start":50,"line_end":50,"column_start":5,"column_end":10},"name":"Flush","qualname":"::mem::Action::Flush","value":"Action::Flush","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Request that the current compression block is terminate.\n","sig":null,"attributes":[{"value":"/ Request that the current compression block is terminate.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3875,"byte_end":3935,"line_start":49,"line_end":49,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":290},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4034,"byte_end":4040,"line_start":52,"line_end":52,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::Action::Finish","value":"Action::Finish","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Request that the compression stream be finalized.\n","sig":null,"attributes":[{"value":"/ Request that the compression stream be finalized.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3976,"byte_end":4029,"line_start":51,"line_end":51,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":283},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3802,"byte_end":3808,"line_start":46,"line_end":46,"column_start":10,"column_end":16},"name":"Action","qualname":"::mem::Action","value":"pub enum Action { Run = , Flush = , Finish = , }","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":290}],"decl_id":null,"docs":" Possible actions to take on compression.\n","sig":null,"attributes":[{"value":"/ Possible actions to take on compression.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3703,"byte_end":3747,"line_start":44,"line_end":44,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":305},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4238,"byte_end":4240,"line_start":59,"line_end":59,"column_start":5,"column_end":7},"name":"Ok","qualname":"::mem::Status::Ok","value":"Status::Ok","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Decompression went fine, nothing much to report.\n","sig":null,"attributes":[{"value":"/ Decompression went fine, nothing much to report.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4181,"byte_end":4233,"line_start":58,"line_end":58,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":307},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4298,"byte_end":4305,"line_start":62,"line_end":62,"column_start":5,"column_end":12},"name":"FlushOk","qualname":"::mem::Status::FlushOk","value":"Status::FlushOk","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" The Flush action on a compression went ok.\n","sig":null,"attributes":[{"value":"/ The Flush action on a compression went ok.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4247,"byte_end":4293,"line_start":61,"line_end":61,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":309},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4359,"byte_end":4364,"line_start":65,"line_end":65,"column_start":5,"column_end":10},"name":"RunOk","qualname":"::mem::Status::RunOk","value":"Status::RunOk","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" THe Run action on compression went ok.\n","sig":null,"attributes":[{"value":"/ THe Run action on compression went ok.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4312,"byte_end":4354,"line_start":64,"line_end":64,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":311},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4421,"byte_end":4429,"line_start":68,"line_end":68,"column_start":5,"column_end":13},"name":"FinishOk","qualname":"::mem::Status::FinishOk","value":"Status::FinishOk","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" The Finish action on compression went ok.\n","sig":null,"attributes":[{"value":"/ The Finish action on compression went ok.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4371,"byte_end":4416,"line_start":67,"line_end":67,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":313},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4515,"byte_end":4524,"line_start":71,"line_end":71,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::mem::Status::StreamEnd","value":"Status::StreamEnd","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" The stream's end has been met, meaning that no more data can be input.\n","sig":null,"attributes":[{"value":"/ The stream's end has been met, meaning that no more data can be input.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4436,"byte_end":4510,"line_start":70,"line_end":70,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":315},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4672,"byte_end":4681,"line_start":75,"line_end":75,"column_start":5,"column_end":14},"name":"MemNeeded","qualname":"::mem::Status::MemNeeded","value":"Status::MemNeeded","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" There was insufficient memory in the input or output buffer to complete\n the request, but otherwise everything went normally.\n","sig":null,"attributes":[{"value":"/ There was insufficient memory in the input or output buffer to complete","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4531,"byte_end":4606,"line_start":73,"line_end":73,"column_start":5,"column_end":80}},{"value":"/ the request, but otherwise everything went normally.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4611,"byte_end":4667,"line_start":74,"line_end":74,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":304},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4168,"byte_end":4174,"line_start":57,"line_end":57,"column_start":10,"column_end":16},"name":"Status","qualname":"::mem::Status","value":"pub enum Status { Ok, FlushOk, RunOk, FinishOk, StreamEnd, MemNeeded, }","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":307},{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":315}],"decl_id":null,"docs":" Result of compression or decompression\n","sig":null,"attributes":[{"value":"/ Result of compression or decompression","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4071,"byte_end":4113,"line_start":55,"line_end":55,"column_start":1,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":329},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5059,"byte_end":5067,"line_start":86,"line_end":86,"column_start":5,"column_end":13},"name":"Sequence","qualname":"::mem::Error::Sequence","value":"Error::Sequence","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" The sequence of operations called on a decompression/compression stream\n were invalid. See methods for details.\n","sig":null,"attributes":[{"value":"/ The sequence of operations called on a decompression/compression stream","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4932,"byte_end":5007,"line_start":84,"line_end":84,"column_start":5,"column_end":80}},{"value":"/ were invalid. See methods for details.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5012,"byte_end":5054,"line_start":85,"line_end":85,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":331},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5165,"byte_end":5169,"line_start":90,"line_end":90,"column_start":5,"column_end":9},"name":"Data","qualname":"::mem::Error::Data","value":"Error::Data","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" The data being decompressed was invalid, or it was not a valid bz2\n stream.\n","sig":null,"attributes":[{"value":"/ The data being decompressed was invalid, or it was not a valid bz2","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5074,"byte_end":5144,"line_start":88,"line_end":88,"column_start":5,"column_end":75}},{"value":"/ stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5149,"byte_end":5160,"line_start":89,"line_end":89,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":333},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5240,"byte_end":5249,"line_start":93,"line_end":93,"column_start":5,"column_end":14},"name":"DataMagic","qualname":"::mem::Error::DataMagic","value":"Error::DataMagic","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" The magic bz2 header wasn't present when decompressing.\n","sig":null,"attributes":[{"value":"/ The magic bz2 header wasn't present when decompressing.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5176,"byte_end":5235,"line_start":92,"line_end":92,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":335},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5310,"byte_end":5315,"line_start":96,"line_end":96,"column_start":5,"column_end":10},"name":"Param","qualname":"::mem::Error::Param","value":"Error::Param","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" The parameters to this function were invalid.\n","sig":null,"attributes":[{"value":"/ The parameters to this function were invalid.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5256,"byte_end":5305,"line_start":95,"line_end":95,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":328},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4920,"byte_end":4925,"line_start":83,"line_end":83,"column_start":10,"column_end":15},"name":"Error","qualname":"::mem::Error","value":"pub enum Error { Sequence, Data, DataMagic, Param, }","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":335}],"decl_id":null,"docs":" Fatal errors encountered when compressing/decompressing bytes.","sig":null,"attributes":[{"value":"/ Fatal errors encountered when compressing/decompressing bytes.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4686,"byte_end":4752,"line_start":78,"line_end":78,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4753,"byte_end":4756,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ These errors indicate that progress could not be made in any form due to","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4757,"byte_end":4833,"line_start":80,"line_end":80,"column_start":1,"column_end":77}},{"value":"/ input or output parameters.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":4834,"byte_end":4865,"line_start":81,"line_end":81,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":6525,"byte_end":6528,"line_start":120,"line_end":120,"column_start":12,"column_end":15},"name":"new","qualname":"<Compress>::new","value":"pub fn new(Compression, u32) -> Compress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new stream prepared for compression.","sig":null,"attributes":[{"value":"/ Creates a new stream prepared for compression.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5340,"byte_end":5390,"line_start":100,"line_end":100,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5395,"byte_end":5398,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ The `work_factor` parameter controls how the compression phase behaves","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5403,"byte_end":5477,"line_start":102,"line_end":102,"column_start":5,"column_end":79}},{"value":"/ when presented with worst case, highly repetitive, input data. If","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5482,"byte_end":5551,"line_start":103,"line_end":103,"column_start":5,"column_end":74}},{"value":"/ compression runs into difficulties caused by repetitive data, the","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5556,"byte_end":5625,"line_start":104,"line_end":104,"column_start":5,"column_end":74}},{"value":"/ library switches from the standard sorting algorithm to a fallback","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5630,"byte_end":5700,"line_start":105,"line_end":105,"column_start":5,"column_end":75}},{"value":"/ algorithm. The fallback is slower than the standard algorithm by perhaps","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5705,"byte_end":5781,"line_start":106,"line_end":106,"column_start":5,"column_end":81}},{"value":"/ a factor of three, but always behaves reasonably, no matter how bad the","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5786,"byte_end":5861,"line_start":107,"line_end":107,"column_start":5,"column_end":80}},{"value":"/ input.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5866,"byte_end":5876,"line_start":108,"line_end":108,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5881,"byte_end":5884,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Lower values of `work_factor` reduce the amount of effort the standard","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5889,"byte_end":5963,"line_start":110,"line_end":110,"column_start":5,"column_end":79}},{"value":"/ algorithm will expend before resorting to the fallback. You should set","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5968,"byte_end":6042,"line_start":111,"line_end":111,"column_start":5,"column_end":79}},{"value":"/ this parameter carefully; too low, and many inputs will be handled by","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":6047,"byte_end":6120,"line_start":112,"line_end":112,"column_start":5,"column_end":78}},{"value":"/ the fallback algorithm and so compress rather slowly, too high, and your","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":6125,"byte_end":6201,"line_start":113,"line_end":113,"column_start":5,"column_end":81}},{"value":"/ average-to-worst case compression times can become very large. The","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":6206,"byte_end":6276,"line_start":114,"line_end":114,"column_start":5,"column_end":75}},{"value":"/ default value of 30 gives reasonable behaviour over a wide range of","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":6281,"byte_end":6352,"line_start":115,"line_end":115,"column_start":5,"column_end":76}},{"value":"/ circumstances.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":6357,"byte_end":6375,"line_start":116,"line_end":116,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":6380,"byte_end":6383,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ Allowable values range from 0 to 250 inclusive. 0 is a special case,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":6388,"byte_end":6460,"line_start":118,"line_end":118,"column_start":5,"column_end":77}},{"value":"/ equivalent to using the default value of 30.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":6465,"byte_end":6513,"line_start":119,"line_end":119,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":7128,"byte_end":7136,"line_start":135,"line_end":135,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compress>::compress","value":"pub fn compress(&mut Self, &[u8], &mut [u8], Action) -> Result<Status, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compress a block of input into a block of output.","sig":null,"attributes":[{"value":"/ Compress a block of input into a block of output.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":6928,"byte_end":6981,"line_start":131,"line_end":131,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":6986,"byte_end":6989,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ If anything other than BZ_OK is seen, `Err` is returned. The action","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":6994,"byte_end":7065,"line_start":133,"line_end":133,"column_start":5,"column_end":76}},{"value":"/ given must be one of Run, Flush or Finish.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":7070,"byte_end":7116,"line_start":134,"line_end":134,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":8538,"byte_end":8550,"line_start":164,"line_end":164,"column_start":12,"column_end":24},"name":"compress_vec","qualname":"<Compress>::compress_vec","value":"pub fn compress_vec(&mut Self, &[u8], &mut Vec<u8>, Action)\n-> Result<Status, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compress a block of input into an output vector.","sig":null,"attributes":[{"value":"/ Compress a block of input into an output vector.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":8275,"byte_end":8327,"line_start":159,"line_end":159,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":8332,"byte_end":8335,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ This function will not grow `output`, but it will fill the space after","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":8340,"byte_end":8414,"line_start":161,"line_end":161,"column_start":5,"column_end":79}},{"value":"/ its current length up to its capacity. The length of the vector will be","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":8419,"byte_end":8494,"line_start":162,"line_end":162,"column_start":5,"column_end":80}},{"value":"/ adjusted appropriately.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":8499,"byte_end":8526,"line_start":163,"line_end":163,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":9241,"byte_end":9249,"line_start":184,"line_end":184,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Compress>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Total number of bytes processed as input\n","sig":null,"attributes":[{"value":"/ Total number of bytes processed as input","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":9185,"byte_end":9229,"line_start":183,"line_end":183,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":9364,"byte_end":9373,"line_start":189,"line_end":189,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Compress>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Total number of bytes processed as output\n","sig":null,"attributes":[{"value":"/ Total number of bytes processed as output","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":9307,"byte_end":9352,"line_start":188,"line_end":188,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":9807,"byte_end":9810,"line_start":201,"line_end":201,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompress>::new","value":"pub fn new(bool) -> Decompress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new stream prepared for decompression.","sig":null,"attributes":[{"value":"/ Creates a new stream prepared for decompression.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":9452,"byte_end":9504,"line_start":195,"line_end":195,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":9509,"byte_end":9512,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ If `small` is true, then the library will use an alternative","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":9517,"byte_end":9581,"line_start":197,"line_end":197,"column_start":5,"column_end":69}},{"value":"/ decompression algorithm which uses less memory but at the cost of","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":9586,"byte_end":9655,"line_start":198,"line_end":198,"column_start":5,"column_end":74}},{"value":"/ decompressing more slowly (roughly speaking, half the speed, but the","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":9660,"byte_end":9732,"line_start":199,"line_end":199,"column_start":5,"column_end":77}},{"value":"/ maximum memory requirement drops to around 2300k). See","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":9737,"byte_end":9795,"line_start":200,"line_end":200,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":10193,"byte_end":10203,"line_start":212,"line_end":212,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompress>::decompress","value":"pub fn decompress(&mut Self, &[u8], &mut [u8]) -> Result<Status, Error>","parent":null,"children":[],"decl_id":null,"docs":" Decompress a block of input into a block of output.\n","sig":null,"attributes":[{"value":"/ Decompress a block of input into a block of output.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":10126,"byte_end":10181,"line_start":211,"line_end":211,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":11373,"byte_end":11387,"line_start":237,"line_end":237,"column_start":12,"column_end":26},"name":"decompress_vec","qualname":"<Decompress>::decompress_vec","value":"pub fn decompress_vec(&mut Self, &[u8], &mut Vec<u8>) -> Result<Status, Error>","parent":null,"children":[],"decl_id":null,"docs":" Decompress a block of input into an output vector.","sig":null,"attributes":[{"value":"/ Decompress a block of input into an output vector.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":11108,"byte_end":11162,"line_start":232,"line_end":232,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":11167,"byte_end":11170,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ This function will not grow `output`, but it will fill the space after","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":11175,"byte_end":11249,"line_start":234,"line_end":234,"column_start":5,"column_end":79}},{"value":"/ its current length up to its capacity. The length of the vector will be","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":11254,"byte_end":11329,"line_start":235,"line_end":235,"column_start":5,"column_end":80}},{"value":"/ adjusted appropriately.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":11334,"byte_end":11361,"line_start":236,"line_end":236,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":12010,"byte_end":12018,"line_start":255,"line_end":255,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Decompress>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Total number of bytes processed as input\n","sig":null,"attributes":[{"value":"/ Total number of bytes processed as input","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":11954,"byte_end":11998,"line_start":254,"line_end":254,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":12133,"byte_end":12142,"line_start":260,"line_end":260,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Decompress>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Total number of bytes processed as output\n","sig":null,"attributes":[{"value":"/ Total number of bytes processed as output","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":12076,"byte_end":12121,"line_start":259,"line_end":259,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":94},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bufread","qualname":"::bufread","value":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":120},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":152},{"krate":0,"index":155}],"decl_id":null,"docs":" I/O streams for wrapping `BufRead` types as encoders/decoders\n","sig":null,"attributes":[{"value":"/ I/O streams for wrapping `BufRead` types as encoders/decoders","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":13164,"byte_end":13229,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":115},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":13640,"byte_end":13649,"line_start":17,"line_end":17,"column_start":12,"column_end":21},"name":"BzEncoder","qualname":"::bufread::BzEncoder","value":"BzEncoder {  }","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"decl_id":null,"docs":" A bz2 encoder, or compressor.","sig":null,"attributes":[{"value":"/ A bz2 encoder, or compressor.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":13439,"byte_end":13472,"line_start":13,"line_end":13,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":13473,"byte_end":13476,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This structure implements a `BufRead` interface and will read uncompressed","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":13477,"byte_end":13555,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":13556,"byte_end":13628,"line_start":16,"line_end":16,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":120},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":13909,"byte_end":13918,"line_start":27,"line_end":27,"column_start":12,"column_end":21},"name":"BzDecoder","qualname":"::bufread::BzDecoder","value":"BzDecoder {  }","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124}],"decl_id":null,"docs":" A bz2 decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A bz2 decoder, or decompressor.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":13706,"byte_end":13741,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":13742,"byte_end":13745,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This structure implements a `BufRead` interface and takes a stream of","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":13746,"byte_end":13819,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":13820,"byte_end":13897,"line_start":26,"line_end":26,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14146,"byte_end":14149,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<BzEncoder<R>>::new","value":"pub fn new(R, Compression) -> BzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14013,"byte_end":14087,"line_start":34,"line_end":34,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14092,"byte_end":14134,"line_start":35,"line_end":35,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14410,"byte_end":14417,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BzEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14349,"byte_end":14398,"line_start":46,"line_end":46,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14662,"byte_end":14669,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BzEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14462,"byte_end":14519,"line_start":51,"line_end":51,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14524,"byte_end":14527,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14532,"byte_end":14604,"line_start":53,"line_end":53,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14609,"byte_end":14650,"line_start":54,"line_end":54,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14797,"byte_end":14807,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BzEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14726,"byte_end":14785,"line_start":59,"line_end":59,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":15363,"byte_end":15372,"line_start":73,"line_end":73,"column_start":12,"column_end":21},"name":"total_out","qualname":"<BzEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes produced by the compressor\n (e.g. the number of bytes read from this stream)","sig":null,"attributes":[{"value":"/ Returns the number of bytes produced by the compressor","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14849,"byte_end":14907,"line_start":64,"line_end":64,"column_start":5,"column_end":63}},{"value":"/ (e.g. the number of bytes read from this stream)","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14912,"byte_end":14964,"line_start":65,"line_end":65,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14969,"byte_end":14972,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Note that, due to buffering, this only bears any relation to","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14977,"byte_end":15041,"line_start":67,"line_end":67,"column_start":5,"column_end":69}},{"value":"/ total_in() when the compressor chooses to flush its data","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":15046,"byte_end":15106,"line_start":68,"line_end":68,"column_start":5,"column_end":65}},{"value":"/ (unfortunately, this won't happen in general","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":15111,"byte_end":15159,"line_start":69,"line_end":69,"column_start":5,"column_end":53}},{"value":"/ at the end of the stream, because the compressor doesn't know","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":15164,"byte_end":15229,"line_start":70,"line_end":70,"column_start":5,"column_end":70}},{"value":"/ if there's more data to come).  At that point,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":15234,"byte_end":15284,"line_start":71,"line_end":71,"column_start":5,"column_end":55}},{"value":"/ `total_out() / total_in()` would be the compression ratio.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":15289,"byte_end":15351,"line_start":72,"line_end":72,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":15567,"byte_end":15575,"line_start":79,"line_end":79,"column_start":12,"column_end":20},"name":"total_in","qualname":"<BzEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes consumed by the compressor\n (e.g. the number of bytes read from the underlying stream)\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes consumed by the compressor","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":15430,"byte_end":15488,"line_start":77,"line_end":77,"column_start":5,"column_end":63}},{"value":"/ (e.g. the number of bytes read from the underlying stream)","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":15493,"byte_end":15555,"line_start":78,"line_end":78,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":17638,"byte_end":17641,"line_start":145,"line_end":145,"column_start":12,"column_end":15},"name":"new","qualname":"<BzDecoder<R>>::new","value":"pub fn new(R) -> BzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":17538,"byte_end":17610,"line_start":143,"line_end":143,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":17615,"byte_end":17626,"line_start":144,"line_end":144,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":17880,"byte_end":17887,"line_start":156,"line_end":156,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":17819,"byte_end":17868,"line_start":155,"line_end":155,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":18132,"byte_end":18139,"line_start":164,"line_end":164,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":17932,"byte_end":17989,"line_start":160,"line_end":160,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":17994,"byte_end":17997,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":18002,"byte_end":18074,"line_start":162,"line_end":162,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":18079,"byte_end":18120,"line_start":163,"line_end":163,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":18267,"byte_end":18277,"line_start":169,"line_end":169,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":18196,"byte_end":18255,"line_start":168,"line_end":168,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":18546,"byte_end":18554,"line_start":177,"line_end":177,"column_start":12,"column_end":20},"name":"total_in","qualname":"<BzDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":18319,"byte_end":18386,"line_start":173,"line_end":173,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":18391,"byte_end":18394,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":18399,"byte_end":18467,"line_start":175,"line_end":175,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":18472,"byte_end":18534,"line_start":176,"line_end":176,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":18690,"byte_end":18699,"line_start":182,"line_end":182,"column_start":12,"column_end":21},"name":"total_out","qualname":"<BzDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":18611,"byte_end":18678,"line_start":181,"line_end":181,"column_start":5,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":159},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":195},{"krate":0,"index":203},{"krate":0,"index":206}],"decl_id":null,"docs":" Reader-based compression/decompression streams\n","sig":null,"attributes":[{"value":"/ Reader-based compression/decompression streams","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":20292,"byte_end":20342,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":174},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":20674,"byte_end":20683,"line_start":16,"line_end":16,"column_start":12,"column_end":21},"name":"BzEncoder","qualname":"::read::BzEncoder","value":"BzEncoder {  }","parent":null,"children":[{"krate":0,"index":176}],"decl_id":null,"docs":" A compression stream which wraps an uncompressed stream of data. Compressed\n data will be read from the stream.\n","sig":null,"attributes":[{"value":"/ A compression stream which wraps an uncompressed stream of data. Compressed","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":20544,"byte_end":20623,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ data will be read from the stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":20624,"byte_end":20662,"line_start":15,"line_end":15,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":177},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":20868,"byte_end":20877,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"BzDecoder","qualname":"::read::BzDecoder","value":"BzDecoder {  }","parent":null,"children":[{"krate":0,"index":179}],"decl_id":null,"docs":" A decompression stream which wraps a compressed stream of data. Decompressed\n data will be read from the stream.\n","sig":null,"attributes":[{"value":"/ A decompression stream which wraps a compressed stream of data. Decompressed","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":20737,"byte_end":20817,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ data will be read from the stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":20818,"byte_end":20856,"line_start":21,"line_end":21,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21109,"byte_end":21112,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<BzEncoder<R>>::new","value":"pub fn new(R, Compression) -> BzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new compression stream which will compress at the given level\n to read compress output to the give output stream.\n","sig":null,"attributes":[{"value":"/ Create a new compression stream which will compress at the given level","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":20964,"byte_end":21038,"line_start":27,"line_end":27,"column_start":5,"column_end":79}},{"value":"/ to read compress output to the give output stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21043,"byte_end":21097,"line_start":28,"line_end":28,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21329,"byte_end":21336,"line_start":36,"line_end":36,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BzEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21268,"byte_end":21317,"line_start":35,"line_end":35,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21602,"byte_end":21609,"line_start":44,"line_end":44,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BzEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21402,"byte_end":21459,"line_start":40,"line_end":40,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21464,"byte_end":21467,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21472,"byte_end":21544,"line_start":42,"line_end":42,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21549,"byte_end":21590,"line_start":43,"line_end":43,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21762,"byte_end":21772,"line_start":49,"line_end":49,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BzEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the underlying writer, finishing the compression stream.\n","sig":null,"attributes":[{"value":"/ Unwrap the underlying writer, finishing the compression stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21683,"byte_end":21750,"line_start":48,"line_end":48,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":22356,"byte_end":22365,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"total_out","qualname":"<BzEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes produced by the compressor\n (e.g. the number of bytes read from this stream)","sig":null,"attributes":[{"value":"/ Returns the number of bytes produced by the compressor","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21842,"byte_end":21900,"line_start":53,"line_end":53,"column_start":5,"column_end":63}},{"value":"/ (e.g. the number of bytes read from this stream)","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21905,"byte_end":21957,"line_start":54,"line_end":54,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21962,"byte_end":21965,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Note that, due to buffering, this only bears any relation to","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":21970,"byte_end":22034,"line_start":56,"line_end":56,"column_start":5,"column_end":69}},{"value":"/ total_in() when the compressor chooses to flush its data","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":22039,"byte_end":22099,"line_start":57,"line_end":57,"column_start":5,"column_end":65}},{"value":"/ (unfortunately, this won't happen in general","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":22104,"byte_end":22152,"line_start":58,"line_end":58,"column_start":5,"column_end":53}},{"value":"/ at the end of the stream, because the compressor doesn't know","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":22157,"byte_end":22222,"line_start":59,"line_end":59,"column_start":5,"column_end":70}},{"value":"/ if there's more data to come).  At that point,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":22227,"byte_end":22277,"line_start":60,"line_end":60,"column_start":5,"column_end":55}},{"value":"/ `total_out() / total_in()` would be the compression ratio.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":22282,"byte_end":22344,"line_start":61,"line_end":61,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":22561,"byte_end":22569,"line_start":68,"line_end":68,"column_start":12,"column_end":20},"name":"total_in","qualname":"<BzEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes consumed by the compressor\n (e.g. the number of bytes read from the underlying stream)\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes consumed by the compressor","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":22424,"byte_end":22482,"line_start":66,"line_end":66,"column_start":5,"column_end":63}},{"value":"/ (e.g. the number of bytes read from the underlying stream)","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":22487,"byte_end":22549,"line_start":67,"line_end":67,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":23419,"byte_end":23422,"line_start":103,"line_end":103,"column_start":12,"column_end":15},"name":"new","qualname":"<BzDecoder<R>>::new","value":"pub fn new(R) -> BzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decompression stream, which will read compressed\n data from the given input stream and decompress it.\n","sig":null,"attributes":[{"value":"/ Create a new decompression stream, which will read compressed","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":23282,"byte_end":23347,"line_start":101,"line_end":101,"column_start":5,"column_end":70}},{"value":"/ data from the given input stream and decompress it.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":23352,"byte_end":23407,"line_start":102,"line_end":102,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":23612,"byte_end":23619,"line_start":110,"line_end":110,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":23551,"byte_end":23600,"line_start":109,"line_end":109,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":23885,"byte_end":23892,"line_start":118,"line_end":118,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":23685,"byte_end":23742,"line_start":114,"line_end":114,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":23747,"byte_end":23750,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":23755,"byte_end":23827,"line_start":116,"line_end":116,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":23832,"byte_end":23873,"line_start":117,"line_end":117,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":24045,"byte_end":24055,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the underlying writer, finishing the compression stream.\n","sig":null,"attributes":[{"value":"/ Unwrap the underlying writer, finishing the compression stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":23966,"byte_end":24033,"line_start":122,"line_end":122,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":24534,"byte_end":24543,"line_start":134,"line_end":134,"column_start":12,"column_end":21},"name":"total_out","qualname":"<BzDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes produced by the decompressor\n (e.g. the number of bytes read from this stream)","sig":null,"attributes":[{"value":"/ Returns the number of bytes produced by the decompressor","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":24125,"byte_end":24185,"line_start":127,"line_end":127,"column_start":5,"column_end":65}},{"value":"/ (e.g. the number of bytes read from this stream)","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":24190,"byte_end":24242,"line_start":128,"line_end":128,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":24247,"byte_end":24250,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Note that, due to buffering, this only bears any relation to","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":24255,"byte_end":24319,"line_start":130,"line_end":130,"column_start":5,"column_end":69}},{"value":"/ total_in() when the decompressor reaches a sync point","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":24324,"byte_end":24381,"line_start":131,"line_end":131,"column_start":5,"column_end":62}},{"value":"/ (e.g. where the original compressed stream was flushed).","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":24386,"byte_end":24446,"line_start":132,"line_end":132,"column_start":5,"column_end":65}},{"value":"/ At that point, `total_in() / total_out()` is the compression ratio.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":24451,"byte_end":24522,"line_start":133,"line_end":133,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":24741,"byte_end":24749,"line_start":140,"line_end":140,"column_start":12,"column_end":20},"name":"total_in","qualname":"<BzDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes consumed by the decompressor\n (e.g. the number of bytes read from the underlying stream)\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes consumed by the decompressor","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":24602,"byte_end":24662,"line_start":138,"line_end":138,"column_start":5,"column_end":65}},{"value":"/ (e.g. the number of bytes read from the underlying stream)","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":24667,"byte_end":24729,"line_start":139,"line_end":139,"column_start":5,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":210},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":237},{"krate":0,"index":243},{"krate":0,"index":253},{"krate":0,"index":257},{"krate":0,"index":260},{"krate":0,"index":263},{"krate":0,"index":273},{"krate":0,"index":277},{"krate":0,"index":280}],"decl_id":null,"docs":" Writer-based compression/decompression streams\n","sig":null,"attributes":[{"value":"/ Writer-based compression/decompression streams","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":29156,"byte_end":29206,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":231},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":29556,"byte_end":29565,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"BzEncoder","qualname":"::write::BzEncoder","value":"BzEncoder {  }","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236}],"decl_id":null,"docs":" A compression stream which will have uncompressed data written to it and\n will write compressed data to an output stream.\n","sig":null,"attributes":[{"value":"/ A compression stream which will have uncompressed data written to it and","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":29416,"byte_end":29492,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ will write compressed data to an output stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":29493,"byte_end":29544,"line_start":14,"line_end":14,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":237},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":29795,"byte_end":29804,"line_start":24,"line_end":24,"column_start":12,"column_end":21},"name":"BzDecoder","qualname":"::write::BzDecoder","value":"BzDecoder {  }","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242}],"decl_id":null,"docs":" A compression stream which will have compressed data written to it and\n will write uncompressed data to an output stream.\n","sig":null,"attributes":[{"value":"/ A compression stream which will have compressed data written to it and","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":29655,"byte_end":29729,"line_start":22,"line_end":22,"column_start":1,"column_end":75}},{"value":"/ will write uncompressed data to an output stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":29730,"byte_end":29783,"line_start":23,"line_end":23,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":30076,"byte_end":30079,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<BzEncoder<W>>::new","value":"pub fn new(W, Compression) -> BzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new compression stream which will compress at the given level\n to write compress output to the give output stream.\n","sig":null,"attributes":[{"value":"/ Create a new compression stream which will compress at the given level","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":29930,"byte_end":30004,"line_start":32,"line_end":32,"column_start":5,"column_end":79}},{"value":"/ to write compress output to the give output stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":30009,"byte_end":30064,"line_start":33,"line_end":33,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":30763,"byte_end":30770,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BzEncoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":30701,"byte_end":30751,"line_start":55,"line_end":55,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31053,"byte_end":31060,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BzEncoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":30832,"byte_end":30890,"line_start":60,"line_end":60,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":30895,"byte_end":30898,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":30903,"byte_end":30979,"line_start":62,"line_end":62,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":30984,"byte_end":31041,"line_start":63,"line_end":63,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31572,"byte_end":31582,"line_start":78,"line_end":78,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<BzEncoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31130,"byte_end":31205,"line_start":68,"line_end":68,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31210,"byte_end":31213,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31218,"byte_end":31291,"line_start":70,"line_end":70,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31296,"byte_end":31372,"line_start":71,"line_end":71,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31377,"byte_end":31420,"line_start":72,"line_end":72,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31425,"byte_end":31428,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31433,"byte_end":31445,"line_start":74,"line_end":74,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31450,"byte_end":31453,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31458,"byte_end":31532,"line_start":76,"line_end":76,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31537,"byte_end":31560,"line_start":77,"line_end":77,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32481,"byte_end":32487,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"finish","qualname":"<BzEncoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31911,"byte_end":31965,"line_start":90,"line_end":90,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31970,"byte_end":31973,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":31978,"byte_end":32054,"line_start":92,"line_end":92,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32059,"byte_end":32093,"line_start":93,"line_end":93,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32098,"byte_end":32101,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32106,"byte_end":32182,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32187,"byte_end":32262,"line_start":96,"line_end":96,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32267,"byte_end":32337,"line_start":97,"line_end":97,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32342,"byte_end":32415,"line_start":98,"line_end":98,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32420,"byte_end":32469,"line_start":99,"line_end":99,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32870,"byte_end":32879,"line_start":110,"line_end":110,"column_start":12,"column_end":21},"name":"total_out","qualname":"<BzEncoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes produced by the compressor","sig":null,"attributes":[{"value":"/ Returns the number of bytes produced by the compressor","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32598,"byte_end":32656,"line_start":105,"line_end":105,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32661,"byte_end":32664,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ Note that, due to buffering, this only bears any relation to","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32669,"byte_end":32733,"line_start":107,"line_end":107,"column_start":5,"column_end":69}},{"value":"/ `total_in()` after a call to `flush()`.  At that point,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32738,"byte_end":32797,"line_start":108,"line_end":108,"column_start":5,"column_end":64}},{"value":"/ `total_out() / total_in()` is the compression ratio.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32802,"byte_end":32858,"line_start":109,"line_end":109,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":33066,"byte_end":33074,"line_start":116,"line_end":116,"column_start":12,"column_end":20},"name":"total_in","qualname":"<BzEncoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes consumed by the compressor\n (e.g. the number of bytes written to this stream.)\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes consumed by the compressor","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":32937,"byte_end":32995,"line_start":114,"line_end":114,"column_start":5,"column_end":63}},{"value":"/ (e.g. the number of bytes written to this stream.)","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":33000,"byte_end":33054,"line_start":115,"line_end":115,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":34713,"byte_end":34716,"line_start":181,"line_end":181,"column_start":12,"column_end":15},"name":"new","qualname":"<BzDecoder<W>>::new","value":"pub fn new(W) -> BzDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoding stream which will decompress all data written\n to it into `obj`.\n","sig":null,"attributes":[{"value":"/ Create a new decoding stream which will decompress all data written","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":34604,"byte_end":34675,"line_start":179,"line_end":179,"column_start":5,"column_end":76}},{"value":"/ to it into `obj`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":34680,"byte_end":34701,"line_start":180,"line_end":180,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":34989,"byte_end":34996,"line_start":191,"line_end":191,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BzDecoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":34927,"byte_end":34977,"line_start":190,"line_end":190,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":35279,"byte_end":35286,"line_start":199,"line_end":199,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BzDecoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":35058,"byte_end":35116,"line_start":195,"line_end":195,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":35121,"byte_end":35124,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":35129,"byte_end":35205,"line_start":197,"line_end":197,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":35210,"byte_end":35267,"line_start":198,"line_end":198,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36187,"byte_end":36197,"line_start":225,"line_end":225,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<BzDecoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":35745,"byte_end":35820,"line_start":215,"line_end":215,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":35825,"byte_end":35828,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":35833,"byte_end":35906,"line_start":217,"line_end":217,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":35911,"byte_end":35987,"line_start":218,"line_end":218,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":35992,"byte_end":36035,"line_start":219,"line_end":219,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36040,"byte_end":36043,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36048,"byte_end":36060,"line_start":221,"line_end":221,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36065,"byte_end":36068,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36073,"byte_end":36147,"line_start":223,"line_end":223,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36152,"byte_end":36175,"line_start":224,"line_end":224,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36787,"byte_end":36793,"line_start":239,"line_end":239,"column_start":12,"column_end":18},"name":"finish","qualname":"<BzDecoder<W>>::finish","value":"pub fn finish(&mut Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the underlying writer, finishing the compression stream.","sig":null,"attributes":[{"value":"/ Unwrap the underlying writer, finishing the compression stream.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36332,"byte_end":36399,"line_start":232,"line_end":232,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36404,"byte_end":36407,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36412,"byte_end":36488,"line_start":234,"line_end":234,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36493,"byte_end":36568,"line_start":235,"line_end":235,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36573,"byte_end":36643,"line_start":236,"line_end":236,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36648,"byte_end":36721,"line_start":237,"line_end":237,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36726,"byte_end":36775,"line_start":238,"line_end":238,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":37179,"byte_end":37188,"line_start":249,"line_end":249,"column_start":12,"column_end":21},"name":"total_out","qualname":"<BzDecoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes produced by the decompressor","sig":null,"attributes":[{"value":"/ Returns the number of bytes produced by the decompressor","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36905,"byte_end":36965,"line_start":244,"line_end":244,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36970,"byte_end":36973,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Note that, due to buffering, this only bears any relation to","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":36978,"byte_end":37042,"line_start":246,"line_end":246,"column_start":5,"column_end":69}},{"value":"/ `total_in()` after a call to `flush()`.  At that point,","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":37047,"byte_end":37106,"line_start":247,"line_end":247,"column_start":5,"column_end":64}},{"value":"/ `total_in() / total_out()` is the compression ratio.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":37111,"byte_end":37167,"line_start":248,"line_end":248,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":37377,"byte_end":37385,"line_start":255,"line_end":255,"column_start":12,"column_end":20},"name":"total_in","qualname":"<BzDecoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes consumed by the decompressor\n (e.g. the number of bytes written to this stream.)\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes consumed by the decompressor","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":37246,"byte_end":37306,"line_start":253,"line_end":253,"column_start":5,"column_end":65}},{"value":"/ (e.g. the number of bytes written to this stream.)","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":37311,"byte_end":37365,"line_start":254,"line_end":254,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":351},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2567,"byte_end":2574,"line_start":80,"line_end":80,"column_start":5,"column_end":12},"name":"Fastest","qualname":"::Compression::Fastest","value":"Compression::Fastest","parent":{"krate":0,"index":350},"children":[],"decl_id":null,"docs":" Optimize for the best speed of encoding.\n","sig":null,"attributes":[{"value":"/ Optimize for the best speed of encoding.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2518,"byte_end":2562,"line_start":79,"line_end":79,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":354},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2637,"byte_end":2641,"line_start":82,"line_end":82,"column_start":5,"column_end":9},"name":"Best","qualname":"::Compression::Best","value":"Compression::Best","parent":{"krate":0,"index":350},"children":[],"decl_id":null,"docs":" Optimize for the size of data being encoded.\n","sig":null,"attributes":[{"value":"/ Optimize for the size of data being encoded.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2584,"byte_end":2632,"line_start":81,"line_end":81,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":357},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2725,"byte_end":2732,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"Default","qualname":"::Compression::Default","value":"Compression::Default","parent":{"krate":0,"index":350},"children":[],"decl_id":null,"docs":" Choose the default compression, a balance between speed and size.\n","sig":null,"attributes":[{"value":"/ Choose the default compression, a balance between speed and size.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2651,"byte_end":2720,"line_start":83,"line_end":83,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":350},"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2500,"byte_end":2511,"line_start":78,"line_end":78,"column_start":10,"column_end":21},"name":"Compression","qualname":"::Compression","value":"pub enum Compression { Fastest = , Best = , Default = , }","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":354},{"krate":0,"index":357}],"decl_id":null,"docs":" When compressing data, the compression level can be specified by a value in\n this enum.\n","sig":null,"attributes":[{"value":"/ When compressing data, the compression level can be specified by a value in","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2366,"byte_end":2445,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/ this enum.","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2446,"byte_end":2460,"line_start":76,"line_end":76,"column_start":1,"column_end":15}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3516,"byte_end":3522,"line_start":34,"line_end":34,"column_start":36,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3564,"byte_end":3570,"line_start":35,"line_end":35,"column_start":36,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5325,"byte_end":5333,"line_start":99,"line_end":99,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":9435,"byte_end":9445,"line_start":194,"line_end":194,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":12218,"byte_end":12224,"line_start":265,"line_end":265,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":12515,"byte_end":12520,"line_start":277,"line_end":277,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":12603,"byte_end":12608,"line_start":281,"line_end":281,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":12745,"byte_end":12756,"line_start":287,"line_end":287,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":12887,"byte_end":12900,"line_start":292,"line_end":292,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":13043,"byte_end":13049,"line_start":298,"line_end":298,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":13994,"byte_end":14003,"line_start":33,"line_end":33,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14330,"byte_end":14339,"line_start":45,"line_end":45,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":15656,"byte_end":15665,"line_start":84,"line_end":84,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":17132,"byte_end":17141,"line_start":125,"line_end":125,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":17519,"byte_end":17528,"line_start":142,"line_end":142,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":17800,"byte_end":17809,"line_start":154,"line_end":154,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":18781,"byte_end":18790,"line_start":187,"line_end":187,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":19922,"byte_end":19931,"line_start":223,"line_end":223,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":20945,"byte_end":20954,"line_start":26,"line_end":26,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":22648,"byte_end":22657,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":22872,"byte_end":22881,"line_start":83,"line_end":83,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":23263,"byte_end":23272,"line_start":100,"line_end":100,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":24828,"byte_end":24837,"line_start":145,"line_end":145,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":25061,"byte_end":25070,"line_start":155,"line_end":155,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":29911,"byte_end":29920,"line_start":31,"line_end":31,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":33154,"byte_end":33163,"line_start":121,"line_end":121,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":34207,"byte_end":34216,"line_start":160,"line_end":160,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":34440,"byte_end":34449,"line_start":170,"line_end":170,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":34585,"byte_end":34594,"line_start":178,"line_end":178,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":37465,"byte_end":37474,"line_start":260,"line_end":260,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":38524,"byte_end":38533,"line_start":299,"line_end":299,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":38757,"byte_end":38766,"line_start":309,"line_end":309,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2327,"byte_end":2334,"line_start":71,"line_end":71,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":94}},{"kind":"Mod","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2344,"byte_end":2348,"line_start":72,"line_end":72,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":159}},{"kind":"Mod","span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/lib.rs","byte_start":2358,"byte_end":2363,"line_start":73,"line_end":73,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":210}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3516,"byte_end":3522,"line_start":34,"line_end":34,"column_start":36,"column_end":42},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":55},"to":{"krate":2,"index":3057}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":3564,"byte_end":3570,"line_start":35,"line_end":35,"column_start":36,"column_end":42},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":55},"to":{"krate":2,"index":3069}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":5325,"byte_end":5333,"line_start":99,"line_end":99,"column_start":6,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":51},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":9435,"byte_end":9445,"line_start":194,"line_end":194,"column_start":6,"column_end":16},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":53},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":12218,"byte_end":12224,"line_start":265,"line_end":265,"column_start":20,"column_end":26},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":55},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":12515,"byte_end":12520,"line_start":277,"line_end":277,"column_start":23,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":328},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":12603,"byte_end":12608,"line_start":281,"line_end":281,"column_start":23,"column_end":28},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":328},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":12745,"byte_end":12756,"line_start":287,"line_end":287,"column_start":20,"column_end":31},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":65},"to":{"krate":0,"index":63}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":12887,"byte_end":12900,"line_start":292,"line_end":292,"column_start":20,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":66},"to":{"krate":0,"index":63}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/mem.rs","byte_start":13043,"byte_end":13049,"line_start":298,"line_end":298,"column_start":29,"column_end":35},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":55},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":13994,"byte_end":14003,"line_start":33,"line_end":33,"column_start":18,"column_end":27},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":14330,"byte_end":14339,"line_start":45,"line_end":45,"column_start":9,"column_end":18},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":15656,"byte_end":15665,"line_start":84,"line_end":84,"column_start":27,"column_end":36},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":115},"to":{"krate":1,"index":4726}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":17132,"byte_end":17141,"line_start":125,"line_end":125,"column_start":26,"column_end":35},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":115},"to":{"krate":1,"index":4783}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":17519,"byte_end":17528,"line_start":142,"line_end":142,"column_start":18,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":17800,"byte_end":17809,"line_start":154,"line_end":154,"column_start":9,"column_end":18},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":18781,"byte_end":18790,"line_start":187,"line_end":187,"column_start":27,"column_end":36},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":120},"to":{"krate":1,"index":4726}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/bufread.rs","byte_start":19922,"byte_end":19931,"line_start":223,"line_end":223,"column_start":26,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":120},"to":{"krate":1,"index":4783}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":20945,"byte_end":20954,"line_start":26,"line_end":26,"column_start":15,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":22648,"byte_end":22657,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":4726}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":22872,"byte_end":22881,"line_start":83,"line_end":83,"column_start":33,"column_end":42},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":4783}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":23263,"byte_end":23272,"line_start":100,"line_end":100,"column_start":15,"column_end":24},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":24828,"byte_end":24837,"line_start":145,"line_end":145,"column_start":24,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":177},"to":{"krate":1,"index":4726}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/read.rs","byte_start":25061,"byte_end":25070,"line_start":155,"line_end":155,"column_start":33,"column_end":42},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":177},"to":{"krate":1,"index":4783}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":29911,"byte_end":29920,"line_start":31,"line_end":31,"column_start":16,"column_end":25},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":33154,"byte_end":33163,"line_start":121,"line_end":121,"column_start":26,"column_end":35},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":231},"to":{"krate":1,"index":4783}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":34207,"byte_end":34216,"line_start":160,"line_end":160,"column_start":32,"column_end":41},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":231},"to":{"krate":1,"index":4726}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":34440,"byte_end":34449,"line_start":170,"line_end":170,"column_start":25,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":231},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":34585,"byte_end":34594,"line_start":178,"line_end":178,"column_start":16,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":237},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":37465,"byte_end":37474,"line_start":260,"line_end":260,"column_start":26,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":237},"to":{"krate":1,"index":4783}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":38524,"byte_end":38533,"line_start":299,"line_end":299,"column_start":32,"column_end":41},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":237},"to":{"krate":1,"index":4726}},{"span":{"file_name":"/home/nic/.cargo/registry/src/github.com-1ecc6299db9ec823/bzip2-0.3.3/src/write.rs","byte_start":38757,"byte_end":38766,"line_start":309,"line_end":309,"column_start":25,"column_end":34},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":237},"to":{"krate":2,"index":3300}}]}